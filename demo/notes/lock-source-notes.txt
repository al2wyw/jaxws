AbstractQueuedSynchronizer{
	Node head;
	Node tail;
	int state;
	
	acquire{
		!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg) -> Thread.currentThread().interrupt()
	}
	acquireInterruptibly{
		!tryAcquire(arg) -> doAcquireInterruptibly(arg)
	}
	acquireShared{
		tryAcquireShared(arg) < 0 -> doAcquireShared(arg);
	}
	acquireSharedInterruptibly{
		tryAcquireShared(arg) < 0 -> doAcquireSharedInterruptibly(arg);
	}
	release{
		if(tryRelease(arg)){
			head != null && head.waitStatus != 0 -> unparkSuccessor(head)
			return true;
		}
		return false;
	}
	releaseShared{
		tryReleaseShared -> doReleaseShared();return true;
		return false;
	}
	tryAcquireNanos(自旋锁的使用){ return tryAcquire(arg) || doAcquireNanos(arg, nanosTimeout); }
	tryAcquireSharedNanos(自旋锁的使用){ return tryAcquireShared(arg) >= 0 || doAcquireSharedNanos(arg, nanosTimeout); }
	
	addWaiter(create new node and set to tail, then set pre and next node, otherwise enq(for loop to set to tail))
	acquireQueued(返回当前线程是否interrupted){
		failed = true; interrupted = false;
		for{
			p = node.predecessor();
			p == head && tryAcquire(arg) -> setHead(node); failed = false; return interrupted;
			shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt() -> interrupted = true
		}finally{failed -> cancelAcquire(node)}
	}
	doAcquireInterruptibly{
		node=addWaiter(Node.EXCLUSIVE);failed = true;
		和 acquireQueued 相同，除了interrupted时直接抛InterruptedException
	}
	setHead{
		head = node;
        node.thread = null;
        node.prev = null;
	}
	shouldParkAfterFailedAcquire(Node pred, Node node){
		//set pre waitStatus to SIGNAL then return true
		int ws = pred.waitStatus;
        if (ws == Node.SIGNAL)
            return true;
        if (ws > 0) {
			//skip over cancelled pre nodes
            do {
                node.prev = pred = pred.prev;
            } while (pred.waitStatus > 0);
            pred.next = node;
        } else {
			// 0 or PROPAGATE are set to SIGNAL
            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
        }
        return false;
	}
	parkAndCheckInterrupt(){
		LockSupport.park(this);
        return Thread.interrupted();
	}
	cancelAcquire(Node node){
		处理所有场景的acquire失败,包括独占和共享
		Node pred = node.prev; Skip cancelled predecessors; node.waitStatus = Node.CANCELLED;
		if(node == tail && set tail to pred)
			compareAndSetNext(pred, predNext, null);
		else
			if(pred != head && ((ws = pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) && pred.thread != null) 
				node.next != null && next.waitStatus <= 0 -> compareAndSetNext(pred, predNext, next);
			else
				unparkSuccessor(node);
	}
	unparkSuccessor(Node node){
		int ws = node.waitStatus;
        ws < 0 -> compareAndSetWaitStatus(node, ws, 0);
		Node s = node.next;
        if (s == null || s.waitStatus > 0) {//CANCELLED
            s = null;
            for (Node t = tail; t != null && t != node; t = t.prev)
                t.waitStatus <= 0 -> s = t;
        }
        s != null -> LockSupport.unpark(s.thread);
	}
	doAcquireShared{
		Node node = addWaiter(Node.SHARED);failed = true;interrupted = false;
		for{
			p = node.predecessor();
			p == head -> int r = tryAcquireShared(arg); 
						 if(r >= 0){
							setHeadAndPropagate(node, r); 
							interrupted -> selfInterrupt();
							failed = false; return; 
						 }
			shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt() -> interrupted = true
		}finally {failed -> cancelAcquire(node)}
	}
	doAcquireSharedInterruptibly(){
		跟 doAcquireShared 相同，除了interrupted时直接抛InterruptedException
	}
	setHeadAndPropagate(Node node, int propagate){
		Node h = head;setHead(node);
		if(propagate > 0 || h == null || h.waitStatus < 0 || (h = head) == null || h.waitStatus < 0 ){
			Node s = node.next; 
			s == null || s.isShared() -> doReleaseShared();
		}
	}
	doReleaseShared(){
		for{
			Node h = head;
			if(h != null && h != tail){	
				if (ws == Node.SIGNAL) {
					!compareAndSetWaitStatus(h, Node.SIGNAL, 0) -> continue;// loop to recheck cases
					unparkSuccessor(h);
				}
				else if (ws == 0 && !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) continue;
			}
			h == head -> break;
		}
	}
}
sync queue的head指向一个空node!(thread=null) 看enq逻辑,enq返回predecessor!!!

Node{
	static final Node SHARED = new Node();
	static final Node EXCLUSIVE = null;
	/** waitStatus value to indicate thread has cancelled */
	static final int CANCELLED =  1;
	/** waitStatus value to indicate successor's thread needs unparking */
	static final int SIGNAL    = -1;
	/** waitStatus value to indicate thread is waiting on condition */
	static final int CONDITION = -2;
	/**
	 * waitStatus value to indicate the next acquireShared should
	 * unconditionally propagate
	 */
	static final int PROPAGATE = -3;
	int waitStatus;
	Node prev;
	Node next;
	Node nextWaiter; -> (SHARED/EXCLUSIVE/node in condition)
	Thread thread;
}

ConditionObject{
	Node firstWaiter;
	Node lastWaiter;
	/** Mode meaning to reinterrupt on exit from wait */
	private static final int REINTERRUPT =  1;
	/** Mode meaning to throw InterruptedException on exit from wait */
	private static final int THROW_IE    = -1;
	
	await();{
		node = addConditionWaiter();int savedState =fullyRelease();interruptMode = 0;
		while (!isOnSyncQueue(node)) {
			LockSupport.park(this); interruptMode = Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0; interruptMode != 0 -> break;
		}
		acquireQueued(node, savedState) && interruptMode != THROW_IE -> interruptMode = REINTERRUPT;
		node.nextWaiter != null -> unlinkCancelledWaiters(Unlinks waken-up waiter nodes from condition queue)
		interruptMode != 0 -> if (interruptMode == THROW_IE) throw new InterruptedException()
							  else if(interruptMode == REINTERRUPT) selfInterrupt()
	}
	await(long time, TimeUnit unit){
		nanosTimeout = unit.toNanos(time);deadline = System.nanoTime() + nanosTimeout; timedout = false;
		while (!isOnSyncQueue(node)) {
			if (nanosTimeout <= 0L) -> timedout = transferAfterCancelledWait(node);break;
			if (nanosTimeout >= spinForTimeoutThreshold) LockSupport.parkNanos(this, nanosTimeout);
			if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break;
			nanosTimeout = deadline - System.nanoTime();
		}
		其他和 await 一样
	}
	awaitUninterruptibly();{
		node = addConditionWaiter(); int savedState =fullyRelease();interrupted = false;
		while (!isOnSyncQueue(node)) {
			LockSupport.park(this);Thread.interrupted() -> interrupted = true;
		}
		acquireQueued(node, savedState) || interrupted -> selfInterrupt()
	}
	signal();{
		first = firstWaiter;first != null -> doSignal(first);
	}
	
	addConditionWaiter(unlinkCancelledWaiters and then create new node and set to lastWaiter)
	fullyRelease(set state to 0 and return original state, unpark successor on sync queue){
		failed = true;
		try{
			savedState = state;
			if(release(savedState)) -> failed = false; return savedState;
			else throw new IllegalMonitorStateException();
		}finally{ failed -> node.waitStatus = Node.CANCELLED; }
	}
	transferAfterCancelledWait{
		compareAndSetWaitStatus(node, Node.CONDITION, 0) -> enq(node); return true;
		while (!isOnSyncQueue(node)) -> Thread.yield();
		return false;
	}
	isOnSyncQueue{
		node.waitStatus == Node.CONDITION || node.prev == null -> return false;
		node.next != null -> return true;
		return findNodeFromTail(node);//find node on sync queue from tail to head
	}
	doSignal(first){
		do{
			(firstWaiter = first.nextWaiter) == null -> lastWaiter = null;
			first.nextWaiter = null;
		}while (!transferForSignal(first) && (first = firstWaiter) != null)
	}
	transferForSignal{
		!compareAndSetWaitStatus(node, Node.CONDITION, 0) -> return false;(说明已经cancelled)
		p = enq(node); ws = p.waitStatus; ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL) ->  LockSupport.unpark(node.thread) (让node所在线程进入到acquireQueue方法中,看wait方法)
		return true;
	}
}

need to be implemented:
tryAcquire
tryRelease
tryAcquireShared
tryReleaseShared
isHeldExclusively

Sync{
	abstract void lock();
	final boolean nonfairTryAcquire(int acquires){
		current = Thread.currentThread();
		if(state == 0){
			compareAndSetState(0, acquires)  -> setExclusiveOwnerThread(current);return true;
		}else if(current == getExclusiveOwnerThread()){
			state+=acquires;return true;
		}
		return false;
	}
	protected final boolean tryRelease(int releases);{
		c = getState()-releases;
		c == 0 -> setExclusiveOwnerThread(null)
		setState(c);
		return c == 0;
	}
	protected final boolean isHeldExclusively();
	final ConditionObject newCondition();
}

NonfairSync{
	final void lock(); {
		if compareAndSetState(0, 1) -> setExclusiveOwnerThread(Thread.currentThread());
		else acquire(1)
	}
	protected final boolean tryAcquire(int acquires);{
		return nonfairTryAcquire(acquires)
	}
}

FairSync{
	final void lock(); (acquire(1))
	protected final boolean tryAcquire(int acquires); {
		current = Thread.currentThread();
		if(state == 0){
			!hasQueuedPredecessors() && compareAndSetState(0, acquires) -> setExclusiveOwnerThread(current);return true;
		}else if(current == getExclusiveOwnerThread()){
			state+=acquires;return true;
		}
		return false;
	}(hasQueuedPredecessors -> whether any threads have been waiting to acquire longer than the current thread)
}


////////////////////////////////////ReentrantReadWriteLock////////////////////////////////////
Sync{
	SHARED_SHIFT: state高16位用来表示读锁占有的线程数量，用低16位表示写锁被同一个线程申请的次数
	SHARED_UNIT:  增加一个读锁，就相当于增加SHARED_UNIT
	MAX_COUNT:    申请读锁最大的线程数量
	EXCLUSIVE_MASK: getState & EXCLUSIVE_MASK算出写锁的线程数
	将获取读锁的线程放入线程本地变量,方便获取持有锁的次数:
	ThreadLocalHoldCounter readHolds//本线程的hc
	HoldCounter cachedHoldCounter//上一次上读锁的hc
	Thread firstReader//第一个上读锁的线程
	int firstReaderHoldCount//第一个上读锁的hc
	
	tryAcquire{
		int c = getState();int w = exclusiveCount(c);
		if (c != 0){
			w == 0 || current != getExclusiveOwnerThread() -> return false;
			w + exclusiveCount(acquires) > MAX_COUNT -> throw new Error;
			setState(c + acquires); return true;
		}
		writerShouldBlock() || !compareAndSetState(c, c + acquires) -> return false;
		setExclusiveOwnerThread(current); return true;
	}
	tryAcquireShared{
		int c = getState();
		exclusiveCount(c) != 0 && getExclusiveOwnerThread() != current -> return -1;//write locked
		int r = sharedCount(c);
		if(!readerShouldBlock() && r < MAX_COUNT && compareAndSetState(c, c + SHARED_UNIT)){
			//获得了读锁,对HoldCounter进行调整
			if(r == 0) -> firstReader = current;firstReaderHoldCount = 1;
			else if(firstReader == current) -> firstReaderHoldCount++;
			else {
				HoldCounter rh = cachedHoldCounter; 
				if(rh == null || rh.tid != getThreadId(current)) -> cachedHoldCounter = rh = readHolds.get();
				else if (rh.count == 0) -> readHolds.set(rh);
				rh.count++
			}
			return 1;
		}
		return fullTryAcquireShared(current);
	}
	tryRelease{
		int nextc = getState() - releases; free = exclusiveCount(nextc) == 0;
		free -> setExclusiveOwnerThread(null);
		setState(nextc);return free;
	}
	tryReleaseShared{
		current = Thread.currentThread();
		if(firstReader == current){
			if (firstReaderHoldCount == 1) firstReader = null;
			else firstReaderHoldCount--;
		}else{
			HoldCounter rh = cachedHoldCounter; 
			rh == null || rh.tid != getThreadId(current) -> rh = readHolds.get();
			int count = rh.count;
			count <= 1 -> readHolds.remove(); count <= 0 -> throw
			--rh.count;
		}
		for{
			int c = getState(); int nextc = c - SHARED_UNIT; compareAndSetState(c, nextc) -> return nextc == 0;
		}
	}
	tryReadLock(){
		Thread current = Thread.currentThread();
		for{
			int c = getState();
			if (exclusiveCount(c) != 0 && getExclusiveOwnerThread() != current) return false;
			int r = sharedCount(c);
			if (r == MAX_COUNT) throw new Error("Maximum lock count exceeded");
			if (compareAndSetState(c, c + SHARED_UNIT)) {
				//获得了读锁,对HoldCounter进行调整
				if(r == 0) -> firstReader = current;firstReaderHoldCount = 1;
				else if(firstReader == current) -> firstReaderHoldCount++;
				else {
					HoldCounter rh = cachedHoldCounter; 
					if(rh == null || rh.tid != getThreadId(current)) -> cachedHoldCounter = rh = readHolds.get();
					else if (rh.count == 0) -> readHolds.set(rh);
					rh.count++
				}
				return true;
			}
		}
	}
	tryWriteLock(){
		Thread current = Thread.currentThread();
		int c = getState();
		if (c != 0) {
			int w = exclusiveCount(c);
			if (w == 0 || current != getExclusiveOwnerThread()) return false;
			if (w == MAX_COUNT) throw new Error("Maximum lock count exceeded");
		}
		if (!compareAndSetState(c, c + 1)) return false;
		setExclusiveOwnerThread(current);
		return true;
	}
	
	fullTryAcquireShared{
		//tryAcquireShared的for循环版(对!readerShouldBlock(), r < MAX_COUNT, compareAndSetState(c, c + SHARED_UNIT)三个条件的重新判断),判断readerShouldBlock的逻辑不一样(为了避免死循环)
		HoldCounter rh = null;
		for (;;) {
			int c = getState();
			if (exclusiveCount(c) != 0) {
				if (getExclusiveOwnerThread() != current) return -1;
			} else if (readerShouldBlock()) {
				if (firstReader != current) {
					if (rh == null) {
						rh = cachedHoldCounter;
						if (rh == null || rh.tid != getThreadId(current)) -> rh = readHolds.get(); if (rh.count == 0) -> readHolds.remove();
					}
					if (rh.count == 0) return -1;
				}
			}
			if (sharedCount(c) == MAX_COUNT) throw new Error("Maximum lock count exceeded");
			if (compareAndSetState(c, c + SHARED_UNIT)) {
				//获得了读锁,对HoldCounter进行调整
				if(r == 0) -> firstReader = current;firstReaderHoldCount = 1;
				else if(firstReader == current) -> firstReaderHoldCount++;
				else {
					HoldCounter rh = cachedHoldCounter; 
					if(rh == null || rh.tid != getThreadId(current)) -> cachedHoldCounter = rh = readHolds.get();
					else if (rh.count == 0) -> readHolds.set(rh);
					rh.count++
				}
				return 1;z
			}
		}
	}
}
NonfairSync{
	readerShouldBlock apparentlyFirstQueuedIsExclusive(the apparent first queued thread is waiting in exclusive mode)
	writerShouldBlock return false;
}
FairSync{
	readerShouldBlock hasQueuedPredecessors(Queries whether any threads have been waiting to acquire longer than the current thread)
	writerShouldBlock hasQueuedPredecessors
}
ReadLock{
	lock -> sync.acquireShared(1);
	tryLock -> sync.tryReadLock();
	unlock -> sync.releaseShared(1);
}
WriteLock{
	lock -> sync.acquire(1);
	tryLock -> sync.tryWriteLock();
	unlock -> sync.release(1);
}

//to be done: StampedLock，TransferQueue，ConcurrentHashMap, ConcurrentSkipListMap
ReentrantReadWriteLock的某个线程获取读锁后可以重复进入(即使有写锁线程在等待),会导致写锁线程饥饿，有写锁线程在等待后新的读锁线程(HoldCounter为0)也无法获得读锁
StampedLock为解决写锁饥饿和提高读写效率，分成三种锁：乐观读，悲观读，写 (使用悲观读，写的效率还不如读写锁)
乐观读: 锁前获取stamp和读锁后再次获取的stamp比较，一致则读取成功否则重读，实质上并没有上锁。写锁依然是悲观锁，同时会更新stamp。
StampedLock的readLock死循环逻辑中，没有处理有关中断的逻辑。因此，这就会导致阻塞在park()上的线程被中断后，会再次进入循环。而当退出条件得不到满足时，就会发生疯狂占用CPU的情况。(先上writeLock，writeLock不释放，同时中断readLock就会导致readLock死循环)

CopyOnWriteArrayList所有的写操作,包括set和add都会上锁, 读操作不加锁
ConcurrentLinkedQueue所有的操作都是使用CAS，无锁
ConcurrentHashMap进行锁node节点(链表的head或者树的root)，写操作，变树和迁移时加synchronize，读操作不加锁(1.8)
ConcurrentHashMap进行锁segment，segment本身就是锁，写操作加锁，读操作不加锁(1.7)
1.7版本: HashMap使用数组存储，ConcurrentHashMap使用Segment数组，每个Segment又使用数组存储数据
1.7版本并发扩容死循环: 1. 扩容前两个元素在同一个slot, A -> B 2. 扩容后A, B 又rehash到同一个slot 3. 扩容时同一个slot的元素会反转 A -> B -> C 变成 C -> B -> A, 所以并发扩容时容易产生循环链表(关键代码在transfer)
1.8版本: HashMap和ConcurrentHashMap都使用数组作为数据存储，数据结构是一致的，同时对哈希碰撞元素进行红黑tree优化避免链表过长
1.8版本capacity调整为2的n次方, 方便取模操作和扩容确定新的index: 1. (h ^ (h >>> 16)) 用高位与或低位，避免table的size太小时碰撞过多，因为取模就是直接 hash & size-1 代替取模操作, 只用到了hash的末尾几位 2. 扩容时 hash & size 为0则不需要移动，为1则新坐标为 index + oldCapacity 3. 扩容时同一个slot的元素保持顺序
1.8版本扩容:(数组容量超过扩容阈值或者treeifyBin时数组大小未超过64均可扩容) HashMap没有考虑并发情况，先把新数组赋值给table字段，再迁移存量数据，会有put数据丢失或者get短暂查询不到的情况。ConcurrentHashMap需要两个数组，按定步长不停地逐步迁移，迁移中无法更新(helpTransfer投入到扩容中，但是也有可能超过扩容线程最大个数而直接返回(最大个数为65535，而且有bug)), 但是可以访问。
1.8版本ConcurrentHashMap关键字段:
nextTable: 扩容期间，将table数组中的元素 迁移到 nextTable
sizeCtl：扩容的阈值，也是数组的大小size
未初始化：sizeCtl=0：表示没有指定初始容量。 sizeCtl>0：表示初始容量。
初始化中： sizeCtl=-1,标记作用，告知其他线程，正在初始化
正常状态： sizeCtl=0.75n ,扩容阈值
扩容中：sizeCtl < 0 : 表示有其他线程正在执行扩容。sizeCtl = (resizeStamp(n) << RESIZE_STAMP_SHIFT) + 2 :表示此时只有一个线程在执行扩容，此线程会进行收尾工作
transferIndex：扩容索引，表示已经分配给扩容线程的table数组索引位置。(从数据组尾开始往前迁移： transferIndex-stride -> transferIndex => bound -> i )


DelayQueue所有操作共用一个锁，内含一个PriorityQueue，Delayed接口实现了Comparable
ArrayBlockingQueue所有操作共用一个锁，环形array的实现，有takeIndex和putIndex，构造函数的fair是锁的属性(内含一个迭代器Itrs,比较复杂，意义不明)
LinkedBlockingQueue有takeLock和putLock两个锁控制take和put操作，take和put共同访问的count是一个原子integer
SynchronousQueue无锁(fair ? new TransferQueue<E>() : new TransferStack<E>()), 主要逻辑在Transfer的实现类的transfer方法(清晰简明)，采用先spin再park来代替直接park
TransferQueue实现: 使用cas去take head和put tail,queue的大小由参与操作同时被休眠的线程数量决定(take/put都会使线程休眠), 基本不spin, 除非queue里只有当前一个元素
TransferStack实现: 使用cas去take,put head, shouldSpin可以防止stack的head被休眠，stack的大小由参与操作同时被休眠的线程数量决定, transfer操作会先把当前fullfilling元素放入栈顶，然后和匹配的元素一起出栈(第三个else是帮助fullfilling的元素和匹配的元素出栈)，为什么不直接把匹配的元素出栈(TransferQueue的transfer就是直接把匹配的元素出栈) ???
LinkedBlockingDeque所有操作共用一个锁,提供putFirst,putLast,takeFirst,takeLast等操作，内部是一个双向链表， 采用spin来代替直接park
LinkedTransferQueue:
无锁,松弛型双重队列(dual queue with slack),head和tail节点相对较松，为了减少CAS操作的次数，如tail后面可以有多个node:
head           tail
 |              |
 v              v
 M -> M -> U -> U -> U -> U (M: matched U: unmatched)
The best value for this "slack" (the targeted maximum distance between the value of "head" and the first unmatched node, and similarly for "tail") is an empirical matter.
拥有SynchronousQueue的transfer能力(spin再park)，也有普通BlockingQueue的add，take等能力，是两种Queue的集合
xfer方法有接受4个不同的how操作：
NOW = 0; //用于没有超时的poll和tryTransfer方法
ASYNC = 1; //用于offer，put，add
SYNC = 2; //用于transfer，take方法
TIMED = 3; //用于有超时的poll，tryTransfer方法

Striped64(false sharing伪共享)
-XX:-RestrictContended
@sun.misc.Contended
public final static class VolatileLong {
	public volatile long value = 0L;
	//public long p1, p2, p3, p4, p5, p6;
}
LongAdder extends Striped64

多个地方调用tryTerminate(),从调用方可以看到多种场景下都可以使线程池终止:
addWorkerFailed (decrementWorkerCount();tryTerminate();) This worker holding up termination
processWorkerExit (workers.remove(w);tryTerminate();)
remove (workQueue.remove(task);tryTerminate();) // In case SHUTDOWN and now empty
shutdown 最后call tryTerminate()
shutdownNow 最后call tryTerminate()
purge ???

Thread.State:
RUNNABLE
TIMED_WAITING(on object monitor)
TIMED_WAITING(parking)
TIMED_WAITING(sleeping)
WAITING(on object monitor)
WAITING(parking)
BLOCKED (on object monitor)
第一行结尾状态:
runnable
waiting for monitor entry
waiting on condition
in Object.wait()