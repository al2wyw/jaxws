SelectorProvider 提供了 selector 的不同平台实现(socketChannel的实现在 SelectorProviderImpl):
WindowsSelectorProvider extends SelectorProviderImpl extends SelectorProvider{
	public AbstractSelector openSelector() throws IOException {
        return new WindowsSelectorImpl(this);
    }
}
WindowsSelectorImpl 的MAX_SELECTABLE_FDS = 1024，windows的特殊实现，每1024个channel会分配一个线程去做select
Selector的wakeUp可以被selectNow清除，wakeUp和LockSupport的unpark效果类似，可以先wakeUp保证下一次select立即返回
Selector各个系统会实现四个方法: doSelect, implClose, implRegister, implDereg
sun.nio.ch.WindowsSelectorImpl extends SelectorImpl extends AbstractSelector extends Selector{
	protected Set<SelectionKey> selectedKeys = new HashSet(); //在doSelect时会往里填充ready的SelectionKey -> this.selectedKeys.contains(var10) -> this.selectedKeys.add(var10)
    protected HashSet<SelectionKey> keys = new HashSet();
    private Set<SelectionKey> publicKeys;//包裹keys
    private Set<SelectionKey> publicSelectedKeys;//包裹selectedKeys

	public int select(long var1) throws IOException {
        if(var1 < 0L) {
            throw new IllegalArgumentException("Negative timeout");
        } else {
            return this.lockAndDoSelect(var1 == 0L?-1L:var1);//会加锁,保证doSelect是同步的
        }
    }

	protected int doSelect(long var1) throws IOException { //WindowsSelectorImpl
        if(this.channelArray == null) {
            throw new ClosedSelectorException();
        } else {
            this.timeout = var1;
            this.processDeregisterQueue();
            if(this.interruptTriggered) {
                this.resetWakeupSocket();
                return 0;
            } else {
                this.adjustThreadsCount();
                this.finishLock.reset();
                this.startLock.startThreads();

                try {
                    this.begin();

                    try {
                        this.subSelector.poll();
                    } catch (IOException var7) {
                        this.finishLock.setException(var7);
                    }

                    if(this.threads.size() > 0) {
                        this.finishLock.waitForHelperThreads();
                    }
                } finally {
                    this.end();
                }

                this.finishLock.checkForException();
                this.processDeregisterQueue();
                int var3 = this.updateSelectedKeys();//好难
                this.resetWakeupSocket();
                return var3;
            }
        }
    }

	void processDeregisterQueue() throws IOException {//doSelect会调用这个方法
		Set var1 = this.cancelledKeys();
        synchronized(var1) {
			...
			SelectionKeyImpl var4 = (SelectionKeyImpl)var3.next();
			this.implDereg(var4);
			...
		}
	}

	protected void implDereg(SelectionKeyImpl var1) throws IOException { //WindowsSelectorImpl
		...
		this.fdMap.remove(var1);
        this.keys.remove(var1);
        this.selectedKeys.remove(var1);
        this.deregister(var1);
        SelectableChannel var7 = var1.channel();
        if(!var7.isOpen() && !var7.isRegistered()) {
            ((SelChImpl)var7).kill();//assert !this.isOpen() && !this.isRegistered(); -> close fd
        }
	}
	
	protected final void deregister(AbstractSelectionKey key) {
        ((AbstractSelectableChannel)key.channel()).removeKey(key);
    }

	void cancel(SelectionKey k) {
        synchronized (cancelledKeys) {
            cancelledKeys.add(k);
        }
    }
	
	public final void close() throws IOException {
        boolean open = selectorOpen.getAndSet(false);
        if (!open)
            return;
        implCloseSelector();{
			wakeup();
			three locks{
				implClose(){//WindowsSelectorImpl
					...
					for(int var7 = 1; var7 < this.totalChannels; ++var7) {
						if(var7 % 1024 != 0) {
							this.deregister(this.channelArray[var7]);//SelectionKeyImpl[] channelArray
							SelectableChannel var3 = this.channelArray[var7].channel();
							if(!var3.isOpen() && !var3.isRegistered()) {
								((SelChImpl)var3).kill();
							}
						}
					}
					...
				}
			}
		}
    }
}

sun.nio.ch.SelectionKeyImpl extends AbstractSelectionKey extends SelectionKey{
	public final void cancel() {
        synchronized (this) {
            if (valid) {
                valid = false;
                ((AbstractSelector)selector()).cancel(this);
            }
        }
    }
}

sun.nio.ch.SocketChannelImpl extends SocketChannel extends AbstractSelectableChannel extends SelectableChannel extends AbstractInterruptibleChannel{
	public final void close() throws IOException {
        synchronized (closeLock) {
            if (!open)
                return;
            open = false;
            implCloseChannel();
        }
    }

	protected final void implCloseChannel() throws IOException {
        implCloseSelectableChannel();//kill
        synchronized (keyLock) {
            int count = (keys == null) ? 0 : keys.length;
            for (int i = 0; i < count; i++) {
                SelectionKey k = keys[i]; //可以把channel重复注册到不同的selector去
                if (k != null)
                    k.cancel();
            }
        }
    }

	public final boolean isRegistered() {
        synchronized (keyLock) {
            return keyCount != 0;
        }
    }

	void removeKey(SelectionKey k) {
        synchronized (keyLock) {
            for (int i = 0; i < keys.length; i++)
                if (keys[i] == k) {
                    keys[i] = null;
                    keyCount--;
                }
            ((AbstractSelectionKey)k).invalidate();
        }
    }
}