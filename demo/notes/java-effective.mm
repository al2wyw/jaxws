<?xml version="1.0" encoding="UTF-8" standalone="no"?><map version="0.8.1"><node CREATED="1580811154576" ID="34ri5dp1bgst7mkl2b3bm6pr13" MODIFIED="1580811154576" TEXT="java"><node CREATED="1580811154576" ID="2eun9u45n75r36259u7d1oab7l" MODIFIED="1580811154576" POSITION="right" TEXT="创建和销毁对象"><node CREATED="1580811154576" ID="38c2rths61759i3kp2nkc4si64" MODIFIED="1580811154576" TEXT="使用静态工厂方法代替构造函数"><node CREATED="1580811154576" ID="0vo3ha5p2bmgv98in8turfqhtq" MODIFIED="1580811154576" TEXT="静态工厂方法有名字，可以表达构造的语义"/><node CREATED="1580811154576" ID="5oj6d9ucbf5p2sc2tgs29ivaqm" MODIFIED="1580811154576" TEXT="静态工厂方法可以封装构造的逻辑，可以不用每次都new一个对象"/><node CREATED="1580811154576" ID="69c07c12alj4sdrooj7ii5vphi" MODIFIED="1580811154576" TEXT="静态工厂方法可以返回子类，更加灵活"/><node CREATED="1580811154576" ID="721an8g2crcf112dnq932onpf9" MODIFIED="1580811154576" TEXT="必须含有共有构造函数 !!!"/></node><node CREATED="1580811154576" ID="045f13lmusb07de61huurnl75i" MODIFIED="1580811154576" TEXT="多个构造器参数时使用builder函数"><node CREATED="1580811154576" ID="59l25fhc2818kjtj252v3rq33j" MODIFIED="1580811154576" TEXT="避免传参出错(特别是参数类型一样时)"/><node CREATED="1580811154576" ID="72v463i5c1v5g2pts6s93umf4n" MODIFIED="1580811154576" TEXT="构造对象时参数可选，更加灵活"/><node CREATED="1580811154576" ID="14m42kiqlb3paevr0qkk1ic7oj" MODIFIED="1580811154576" TEXT="必须先创建builder对象 构造过程冗长!!!"/></node><node CREATED="1580811154576" ID="0tkhpfsp6pm9r0gk74dbkdu42u" MODIFIED="1580811154576" TEXT="使用私有构造函数和枚举类实现singleton"><node CREATED="1580811154576" ID="6p8oae1lqj19oamg8nrut2rv52" MODIFIED="1580811154576" TEXT="Enum单个INSTANCE"/></node><node CREATED="1580811154576" ID="3r6r3ujtbvnahat64n8h1ke3p6" MODIFIED="1580811154576" TEXT="使用私有构造函数避免被实例化"><node CREATED="1580811154576" ID="4pcemo5jfguamqjmprn4v1ebft" MODIFIED="1580811154576" TEXT="Utility类"/></node><node CREATED="1580811154576" ID="3h8e3oq9e0833r06boj66p3s23" MODIFIED="1580811154576" TEXT="避免构造不必要的对象"><node CREATED="1580811154576" ID="1p8ndudrqa2vr2s7eqdank0tsb" MODIFIED="1580811154576" TEXT="自动装箱拆箱"/></node></node><node CREATED="1580811154576" ID="3rqgmq9vn7ptt4ndsrqi52f8sb" MODIFIED="1580811154576" POSITION="right" TEXT="类和接口"><node CREATED="1580811154576" ID="43157glsn3h1cdkkjjbetchfl9" MODIFIED="1580811154576" TEXT="使类和成员可访问性最小化"/><node CREATED="1580811154576" ID="4l1d5envk0telhujsqj1bo474b" MODIFIED="1580811154576" TEXT="在公有类中使用公有方法而不是公有域"/><node CREATED="1580811154576" ID="11fjnt2sprh1rf3u4olb9nvo5g" MODIFIED="1580811154576" TEXT="使类可变性最小化"><node CREATED="1580811154576" ID="36gbcjhe5h5avviutua52404mg" MODIFIED="1580811154576" TEXT="不可变类比较安全"/></node><node CREATED="1580811154576" ID="74bil8t0r0vr77u7l05c5kkib9" MODIFIED="1580811154576" TEXT="复合优于继承"><node CREATED="1580811154576" ID="7pbq1vkm3vpig5liv2orlo7qkr" MODIFIED="1580811154576" TEXT="继承打破封装性"><node CREATED="1580811154576" ID="1vgu08lbj0hpqk55r32qfu1l81" MODIFIED="1580811154576" TEXT="子类新增方法: 父类在后续也新增同样的方法，会发生冲突"/><node CREATED="1580811154576" ID="464ekgolpn94rk4ouj97n3lth1" MODIFIED="1580811154576" TEXT="子类覆盖方法"><node CREATED="1580811154576" ID="3rvh06ia7njh19a2hnk8vp9i52" MODIFIED="1580811154576" TEXT="子类的实现其实是依赖于父类，如果父类更改实现，可能会影响子类"/><node CREATED="1580811154576" ID="6mcr82af0hnoqpi372c3j3sc5j" MODIFIED="1580811154576" TEXT="父类新增方法的话，子类无法自动覆盖，逻辑可能有遗漏"/></node></node><node CREATED="1580811154576" ID="10ajtpcul3sl5mglfhd4eo9iqu" MODIFIED="1580811154576" TEXT="使用可复用的转发类(Forwarding)进行方法转发到复合的原类上，子类继承转发类而不是原来的类， 子类被称为包装类(装饰器模式)"/><node CREATED="1580811154576" ID="1fn0fvk4eanut0q6f1u932gmgt" MODIFIED="1580811154576" TEXT="转发和委托的区别 ???"/><node CREATED="1580811154576" ID="5696861q6ig81dq573dinjonaf" MODIFIED="1580811154576" TEXT="只有子类和父类是 is-a 的关系时，而且父类是为了继承而设计的，才能使用继承"/></node><node CREATED="1580811154576" ID="4fjrnic0solvp3ca7n0oqdnv1d" MODIFIED="1580811154576" TEXT="要么为继承而设计，并提供文档说明，要么就禁止继承"><node CREATED="1580811154576" ID="216n96mevsf8ulp6mfe4j227sc" MODIFIED="1580811154576" TEXT="不为继承而设计的具体类(禁止继承)"><node CREATED="1580811154576" ID="359bri5bgooci8lqd8nmuad81p" MODIFIED="1580811154576" TEXT="声明为final 类"/><node CREATED="1580811154576" ID="22rl19s5samgrlgu3fj228iibh" MODIFIED="1580811154576" TEXT="私有构造函数，并提供公有的静态工厂方法"/></node><node CREATED="1580811154576" ID="2p93h8tfqr46jujo6fdv7j2qed" MODIFIED="1580811154576" TEXT="为继承而设计的类"><node CREATED="1580811154576" ID="5vlgeu4oql8psgank7o69v51cf" MODIFIED="1580811154576" TEXT="必须有文档说明可覆盖方法的自用性(可覆盖方法被哪些方法调用了)"><node CREATED="1580811154576" ID="62i0js8n7fvrqdt5k6vsie2r1o" MODIFIED="1580811154576" TEXT="可以把自用方法转变成私有方法，可覆盖方法都转为调用私有方法"/></node><node CREATED="1580811154576" ID="5njc8t241u8ub3758rdl9000st" MODIFIED="1580811154576" TEXT="使用protected方法来暴露父类实现的细节，子类复写protected方法(可以通过编写子类来测试父类暴露的protected域是否满足子类需求)"/><node CREATED="1580811154576" ID="286tj5d34nnn9f645248ujfmfa" MODIFIED="1580811154576" TEXT="构造器禁止调用可复写方法(clone和readObject也是一种构造方法)"/></node></node><node CREATED="1580811154576" ID="7i6gjmm42q47l4k41naaiogtjt" MODIFIED="1580811154576" TEXT="接口优于抽象类"><node CREATED="1580811154576" ID="4eoh1fg9u8vr1r2tl8qfkh9kq5" MODIFIED="1580811154576" TEXT="接口的优势"><node CREATED="1580811154576" ID="7u0vc8t4g47jg1167rbdqk1rqj" MODIFIED="1580811154576" TEXT="子主题 1"/><node CREATED="1580811154576" ID="503carklmjjd2f1npd71un9gbv" MODIFIED="1580811154576" TEXT="子主题 2"/><node CREATED="1580811154576" ID="0jfcs8fpe52c08me0473r3090p" MODIFIED="1580811154576" TEXT="子主题 3"/></node><node CREATED="1580811154576" ID="5l3avto617sppkbihvod54jrfu" MODIFIED="1580811154576" TEXT="骨架类(抽象类结合接口)"><node CREATED="1580811154576" ID="0im2msim5gs3r0elcrqsjmgcka" MODIFIED="1580811154576" TEXT="为接口提供抽象骨架类实现，可以把接口和抽象类的优点相结合"/><node CREATED="1580811154576" ID="7p82a9hj11iq2g25ksvv79ojqk" MODIFIED="1580811154576" TEXT="使用包装类转发实现&quot;多重继承&quot;"/></node><node CREATED="1580811154576" ID="34fmafq5m42bc0gt18soun47rq" MODIFIED="1580811154576" TEXT="抽象类的优势"><node CREATED="1580811154576" ID="5si0ea705mrn4o72n96k1kedn9" MODIFIED="1580811154576" TEXT="抽象类的演变比接口的演变容易(直接添加一个默认实现), 现在有default方法，这个优势不存在"/></node></node><node CREATED="1580811154576" ID="017kdfselopobbe9dqshfebd3g" MODIFIED="1580811154576" TEXT="类多态优于类型属性"><node CREATED="1580811154576" ID="4irch97rl65lge8ccb8qro2irq" MODIFIED="1580811154576" TEXT="内部使用一个字段标识类型，而不使用继承多态"/></node><node CREATED="1580811154576" ID="4pujjgdv1o790ecbsd871hp3mf" MODIFIED="1580811154576" TEXT="用函数对象表示策略"><node CREATED="1580811154576" ID="6addhf9c401r823420bl9qo9hb" MODIFIED="1580811154576" TEXT="函数指针 delegate lambda"/></node><node CREATED="1580811154576" ID="435anshlpl6iabc532lee7ivqd" MODIFIED="1580811154576" TEXT="优先考虑静态成员类"><node CREATED="1580811154576" ID="0neuragmqr8b9cd5d6uvjr9hp8" MODIFIED="1580811154576" TEXT="最简单的嵌套类，最好看成普通类，只是被声明在另一个类里面"/><node CREATED="1580811154576" ID="1nfep3svptndqo4r1pq6fko392" MODIFIED="1580811154576" TEXT="可以访问外部类，最常见用于公有辅助类"/></node><node CREATED="1580811154576" ID="0hked62s0h5jjk74k00g2jjtt2" MODIFIED="1580811154576" TEXT="接口只用来定义类型"><node CREATED="1580811154576" ID="191mb91p63reruukcto6ijh3df" MODIFIED="1580811154576" TEXT="常量接口不可取(没有方法，只有final字段)，会污染实现类"/><node CREATED="1580811154576" ID="2457omgdm81oshiki1l456k2ld" MODIFIED="1580811154576" TEXT="使用final的类型定义公有的常量字段"/></node></node><node CREATED="1580811154576" ID="07hb7banlv6k4p5c6cgf1715al" MODIFIED="1580811154576" POSITION="right" TEXT="泛型"><node CREATED="1580811154576" ID="09v6sohh4sk95ekt6e03tcuuvo" MODIFIED="1580811154576" TEXT="不要使用raw类型"><node CREATED="1580811154576" ID="0k69h82dic6muigug817v6r3l5" MODIFIED="1580811154576" TEXT="使用原生态类型，失去了泛型的类型检查的安全性和类型表述性的优势"/><node CREATED="1580811154576" ID="6jh1u7llkjceuq9mc98l856a2n" MODIFIED="1580811154576" TEXT="泛型有子类型化的规则: List&lt;String&gt; 无法赋值给 List&lt;Object&gt;, 但是可以赋值给List 或者 List&lt;?&gt; 或者 List&lt;E&gt;"/><node CREATED="1580811154576" ID="3fdqj1sjld8ee1st3v6oc52lgn" MODIFIED="1580811154576" TEXT="List 和 List&lt;Object&gt; 只是在编译器端有不同，前者不会做类型安全检查"/></node><node CREATED="1580811154576" ID="14bdpn6v8g11713p1sgac6jes7" MODIFIED="1580811154576" TEXT="列表优于数组"><node CREATED="1580811154576" ID="4valdplrcdiq1redplv38edhgt" MODIFIED="1580811154576" TEXT="数组是协变的，泛型是不可变的"><node CREATED="1580811154576" ID="559a2ppadksqnbpbj3kop5sgut" MODIFIED="1580811154576" TEXT="String[] instanceOf Object[] -&gt; true"/><node CREATED="1580811154576" ID="2ckunis9rqg27hulvlpf0rjv9m" MODIFIED="1580811154576" TEXT="List&lt;String&gt; instanceOf List&lt;Object&gt; -&gt; false"/></node><node CREATED="1580811154576" ID="3kb5t11ejaqj3lfsq7lui38tmf" MODIFIED="1580811154576" TEXT="数组的类型是具体化的(没有擦除)，泛型的类型不可具体化(实际类型会被擦除)"/><node CREATED="1580811154576" ID="6l3j7uo625ov9p8d13nrokkhje" MODIFIED="1580811154576" TEXT="new的时候 数组不能与泛型同时使用(数组的类型必须可具体化): new List&lt;String&gt;[]{} 是不合法的, 唯一例外是通配符 new List&lt;?&gt;[]{}"/></node><node CREATED="1580811154576" ID="3d9ejjdmbk2k815co9thf2nuhp" MODIFIED="1580811154576" TEXT="优先考虑泛型"><node CREATED="1580811154576" ID="0dk6ah4i9c0dbrbbebro41f56q" MODIFIED="1580811154576" TEXT="泛型比客户端代码中进行类型转换更加安全更加容易"/><node CREATED="1580811154576" ID="3lg1vc8fpccs6ob02vfuh57dnv" MODIFIED="1580811154576" TEXT="注意泛型数组的创建处理"><node CREATED="1580811154576" ID="1om58q6hm9ju5ddoei8hgtg2tu" MODIFIED="1580811154576" TEXT="E[] array = (E[])new Object[10];"/><node CREATED="1580811154576" ID="3dd1o9ts1h4f8sa6kitb1qcl7i" MODIFIED="1580811154576" TEXT="Object[] array = new Object[10];"/></node></node><node CREATED="1580811154576" ID="2j2bl54irknb3a6tooagrjrtsh" MODIFIED="1580811154576" TEXT="优于考虑泛型方法"><node CREATED="1580811154576" ID="0gpseirv379ledgalu940vog7s" MODIFIED="1580811154576" TEXT="类型推导"><node CREATED="1580811154576" ID="1f2lgtnbm6pjairs52q42ehuam" MODIFIED="1580811154576" TEXT="泛型构造函数必须指明类型 -&gt; 使用泛型静态工厂方法来简化"/><node CREATED="1580811154576" ID="2i7l2g1c4e3ll9qltm7nqgmmfm" MODIFIED="1580811154576" TEXT="泛型方法编译器会自动推导类型"><node CREATED="1580811154576" ID="15ucpqrrafdrv4cfs4sl3ejg6k" MODIFIED="1580811154576" TEXT="泛型单例工厂"/><node CREATED="1580811154576" ID="3a728opanctthk97pc3667hi7o" MODIFIED="1580811154576" TEXT="递归类型限制 E extends Comparable&lt;E&gt;"/></node></node><node CREATED="1580811154576" ID="7bgsih09ptpij8spojus364tj9" MODIFIED="1580811154576" TEXT="工具类的静态方法尤其适合泛型方法"/><node CREATED="1580811154576" ID="5490kkmj7bnb01m4mdjomfppgf" MODIFIED="1580811154576" TEXT="泛型方法比客户端代码中进行参数和返回值的转换更加安全更加容易"/></node><node CREATED="1580811154576" ID="0gmutu5tiqnn4o9hr9miel2toc" MODIFIED="1580811154576" TEXT="利用 有限制 通配符(？ extends Object)来提高灵活性(参考列表优于数组 new)"><node CREATED="1580811154576" ID="4ad83o085t0810cr194l5fksv3" MODIFIED="1580811154576" TEXT="方法的参数: PECS: producer extend, consumer super. 参数化类型表示T类型的生产者，就使用&lt;? extends T&gt;, 如果它表示T类型的消费者，就使用&lt;? super T&gt;"/><node CREATED="1580811154576" ID="42hdl6ldiau7sq3qfrb92c6taj" MODIFIED="1580811154576" TEXT="方法的返回值: 不要使用通配符类型作为返回类型"/><node CREATED="1580811154576" ID="2nkbmi17ae55m18u3qbb900mk9" MODIFIED="1580811154576" TEXT="无法添加null以外的任何值到 List&lt;?&gt;， 注意处理这种case"/></node><node CREATED="1580811154576" ID="0q3qcc91c3mjh3vht2jfv5os9h" MODIFIED="1580811154576" TEXT="优先考虑类型安全的异构容器"><node CREATED="1580811154576" ID="0dqp6ha7rbi8ml6e25la00d3cs" MODIFIED="1580811154576" TEXT="将泛型放到容器的键上，而不是放到容器的class声明上，来达到异构容器: Map&lt;Class&lt;?&gt;, Object&gt;"/><node CREATED="1580811154576" ID="5akkuff834tttcfo2iq0tlds3j" MODIFIED="1580811154576" TEXT="Map&lt;Class&lt;?&gt;, Object&gt;有两个局限性"><node CREATED="1580811154576" ID="1be7e6229elobj7cj2tb2crd2f" MODIFIED="1580811154576" TEXT="如果使用Class原始类型，就可以把String的class对象和int类型的值放入其中，所以需要对放入的值作校验"/><node CREATED="1580811154576" ID="1khmt4f9t95qgno6f5ujptkq2e" MODIFIED="1580811154576" TEXT="不可以存放泛型类型，如List&lt;String&gt;, 因为没有List&lt;String&gt;.class"/></node></node></node><node CREATED="1580811154576" ID="6cvhk5ab0cvdmjcaaocqic0dog" MODIFIED="1580811154576" POSITION="right" TEXT="枚举和注解"><node CREATED="1580811154576" ID="1lv3ofb6qimuu8ir2ffmr931vv" MODIFIED="1580811154576" TEXT="enum代替int常量， enumSet代替位域， enumMap代替序数索引"/><node CREATED="1580811154576" ID="3t8ehdpepcqq5igjafq7mqpctp" MODIFIED="1580811154576" TEXT="用接口模拟可伸缩的枚举"><node CREATED="1580811154576" ID="3gr4aukmk53ljqbhik3mvc58qj" MODIFIED="1580811154576" TEXT="枚举不可扩展，所以通过接口来达到扩展能力: Enum BasicOp implements Ops, Enum ExtOp implements Ops, 只要依赖的是Ops则可以实现扩展"/></node><node CREATED="1580811154576" ID="0n7vif4cl3ep6bc2f0fu4rh2j0" MODIFIED="1580811154576" TEXT="注解优于命名模式"><node CREATED="1580811154576" ID="5uhmoi69dgurapfuoinvoerd50" MODIFIED="1580811154576" TEXT="命名模式: 以某种特殊模式命名(Testxxxx 以Test开头的命名)，表明需要通过某种工具或者框架进行特殊处理"/></node><node CREATED="1580811154576" ID="52s6c6g6729pqu302fs6fl4raf" MODIFIED="1580811154576" TEXT="标记注解和标记接口"><node CREATED="1580811154576" ID="6f9tgofrf0o6c9t4ugrlh6g9nd" MODIFIED="1580811154576" TEXT="注解如果是ElementType.Type， 此时应该想想是否标记接口更合适"/></node></node><node CREATED="1580811154576" ID="1i2bh02avrregunbi1av39tlg8" MODIFIED="1580811154576" POSITION="right" TEXT="方法"><node CREATED="1580811154576" ID="5lnm4v5hi8dit32p1upan76po5" MODIFIED="1580811154576" TEXT="检查参数有效性"/><node CREATED="1580811154576" ID="02h1ioa9048u77rhpatai71t9k" MODIFIED="1580811154576" TEXT="进行保护性拷贝"><node CREATED="1580811154576" ID="32ga4fe8mapvjkhv38kaih5jui" MODIFIED="1580811154576" TEXT="对构造函数的入参和私有字段(在公有access方法里)进行拷贝，注意这些字段类型是可变的"/></node><node CREATED="1580811154576" ID="24nqaa1k4srq20uodvfs7qj8rn" MODIFIED="1580811154576" TEXT="谨慎设计方法签名"><node CREATED="1580811154576" ID="71bqprqbo13rpimjgcirmnoo0b" MODIFIED="1580811154576" TEXT="符合方法的命名规则"/><node CREATED="1580811154576" ID="0buejcprv99h29s8k44b2o8b0q" MODIFIED="1580811154576" TEXT="不要提供太多便利方法(shorthand method)"/><node CREATED="1580811154576" ID="271e2kvadvpvlc7ih3n8e295no" MODIFIED="1580811154576" TEXT="避免过长的参数列表"><node CREATED="1580811154576" ID="22hk7r8lkbd8fl5fpn19or9huj" MODIFIED="1580811154576" TEXT="builder模式来设置参数"/></node><node CREATED="1580811154576" ID="3nqtf4bltsce94hlere47n98e2" MODIFIED="1580811154576" TEXT="优先使用enum代替boolean类型"/><node CREATED="1580811154576" ID="046lfblp8vi77o50243tkeh73o" MODIFIED="1580811154576" TEXT="参数类型优先使用接口而不是类"/></node><node CREATED="1580811154576" ID="3enn0nngucdbalqk4rnie19ig5" MODIFIED="1580811154576" TEXT="慎用可变参数 ... args"><node CREATED="1580811154576" ID="1ncqqkd61kes1vr09o4odr386p" MODIFIED="1580811154576" TEXT="每次调用都会进行数组初始化"><node CREATED="1580811154576" ID="40q784dpu8us658oftejfi239c" MODIFIED="1580811154576" TEXT="提供多个参数的重载方法，当参数超过3个时使用可变参数:&#13;&#10;foo(); foo(int); foo(int,int) foo(int, int, int); foo(int,int,int, int... args)"/></node><node CREATED="1580811154576" ID="6l57r22hci6bjvi8fpkam0k6jr" MODIFIED="1580811154576" TEXT="当参数是0到多个时使用，当参数是1到多个时使用(firstArg, ... otherArg)代替"/><node CREATED="1580811154576" ID="0tves5p40u56taqroac60ua163" MODIFIED="1580811154576" TEXT="Arrays.asList是可变参数，不要传递一个数组进去 !!!"/></node><node CREATED="1580811154576" ID="0uohgv27f6hv0jh42i4khdpmdr" MODIFIED="1580811154576" TEXT="慎用重载"><node CREATED="1580811154576" ID="3a4ihv50f6ehs3vtarh1ma8uqp" MODIFIED="1580811154576" TEXT="覆盖的选择是动态的，重载的选择是静态的"/><node CREATED="1580811154576" ID="4o09n9rnb3t0tbi67cr1idotj2" MODIFIED="1580811154576" TEXT="永远不要导出相同参数数目的重载方法(可以使用不同的命名: readLong, readInt), 而且行为还不一致"><node CREATED="1580811154576" ID="200pt8n1takjivrgc91mvepfj8" MODIFIED="1580811154576" TEXT="List.remove(int i) 和 List.remove(E e)"/></node><node CREATED="1580811154576" ID="2psep9i7l2gn97di1a4o69p3nq" MODIFIED="1580811154576" TEXT="要使用相同数目的重载方法就必须保证所有重载方法的行为一致"><node CREATED="1580811154576" ID="51kpajo2l0ccdoth125b2oue7g" MODIFIED="1580811154576" TEXT="String.contentEquals"/></node></node></node><node CREATED="1580811154576" ID="3t1rquglrhj16s2v4rmb8mfl38" MODIFIED="1580811154576" POSITION="left" TEXT="并发"><node CREATED="1580811154576" ID="7if63njflt92cm2tmdabrcm2u5" MODIFIED="1580811154576" TEXT="不要依赖线程调度器"><node CREATED="1580811154576" ID="2d209ajun2t5tg4pkpsctldl3o" MODIFIED="1580811154576" TEXT="Thread.yield"/><node CREATED="1580811154576" ID="3h0i8c3f6l29560vn93kd937gd" MODIFIED="1580811154576" TEXT="线程优先级"/><node CREATED="1580811154576" ID="5lm33nk8k3414qblp038fqkq49" MODIFIED="1580811154576" TEXT="没有保证"/></node><node CREATED="1580811154576" ID="6vc7kmueofla9urtfds7q83d6c" MODIFIED="1580811154576" TEXT="避免使用线程组"/><node CREATED="1580811154576" ID="28jv1oo7u19ammaflg2sfebjgg" MODIFIED="1580811154576" TEXT="避免过度同步"><node CREATED="1580811154576" ID="5n1dpt13tsb3rg9qqemtl94ntc" MODIFIED="1580811154576" TEXT="控制同步区域大小，避免在区域内调用外来的方法"/></node><node CREATED="1580811154576" ID="1nptshkbfa8fr6l43hvec7vm4n" MODIFIED="1580811154576" TEXT="谨慎使用延迟加载"><node CREATED="1580811154576" ID="6nnki3513v4bij7kh5h838arl1" MODIFIED="1580811154576" TEXT="实例域"><node CREATED="1580811154576" ID="5h9fvoeo7a0lpktitqodh2se5u" MODIFIED="1580811154576" TEXT="双重检查 或 单重检查(允许重复初始化)"/></node><node CREATED="1580811154576" ID="1rg16qkmtsbblgs7o72v03ao91" MODIFIED="1580811154576" TEXT="静态域"><node CREATED="1580811154576" ID="63r3do7g80be2catg23a92pi4m" MODIFIED="1580811154576" TEXT="lazy initialization holder class"/></node></node><node CREATED="1580811154576" ID="4ntq1tagru7it6mh8v09h1atga" MODIFIED="1580811154576" TEXT="线程池优先于线程"/><node CREATED="1580811154576" ID="068ld7gh82p8srsl0t7j2kk3rf" MODIFIED="1580811154576" TEXT="并发工具类优先于wait和notify"/></node><node CREATED="1580811154576" FOLDER="true" ID="1f93imqritd3rqi7ob189f92d9" MODIFIED="1580811154576" POSITION="left" TEXT="异常"><node CREATED="1580811154576" ID="2oq1md6a751ecr3dltppnaaedc" MODIFIED="1580811154576" TEXT="不要使用异常来控制流程"/><node CREATED="1580811154576" ID="0l7c8mulkdkoq4h5cuhd9484sv" MODIFIED="1580811154576" TEXT="对可恢复的情况使用检查异常，对编程错误使用运行时异常"/><node CREATED="1580811154576" ID="3kephjtanohi0e6dk67m2ojbsk" MODIFIED="1580811154576" TEXT="异常信息包含上下文内容"/><node CREATED="1580811154576" ID="0k0ibadhvikt4tvrj42opfp6b0" MODIFIED="1580811154576" TEXT="优先使用标准异常"/><node CREATED="1580811154576" ID="7mmp6mtpkccufre2hiito6a9g1" MODIFIED="1580811154576" TEXT="抛出与抽象相应的异常"><node CREATED="1580811154576" ID="1ahbcuerg9c2smlm4qq6srnkkn" MODIFIED="1580811154576" TEXT="底层异常进行转移成顶层可以识别的异常，然后向上传播，形成异常链"/></node><node CREATED="1580811154576" ID="6ukbdb0pdb9fla2p5boqqq98n5" MODIFIED="1580811154576" TEXT="不要忽略异常"/></node><node CREATED="1580811154576" ID="6sc43llfqdheco6m64m175100e" MODIFIED="1580811154576" POSITION="left" TEXT="通用程序设计"><node CREATED="1580811154576" ID="6k9kojdusvud03hm73jqra5ri2" MODIFIED="1580811154576" TEXT="如果其他类型更合适，尽量避免使用字符串"/><node CREATED="1580811154576" ID="1demh2qj8bfn3ft18ofesg7s9a" MODIFIED="1580811154576" TEXT="谨慎地进行优化"><node CREATED="1580811154576" ID="439bsvgch3e3qb0lb94nbubsvi" MODIFIED="1580811154576" TEXT="性能和结构哪个更重要 ???"/></node><node CREATED="1580811154576" ID="7n767fbono7tenror7m3vpm9jn" MODIFIED="1580811154576" TEXT="将局部变量的作用域最小化"/><node CREATED="1580811154576" ID="0ouhabq42v90qecppai92popp6" MODIFIED="1580811154576" TEXT="... (其他可以忽略)"/></node><node CREATED="1580811154576" ID="26jd54cjjfn11tkm1bjuj0u9hf" MODIFIED="1580811154576" POSITION="left" TEXT="序列化"/></node></map>