1.lock & thread pool
2.thread
3.class loader
4.reflection & proxy
5.nio & byte buffer

这是HotSpot的优化方式带来的性能特性，同时也是许多虚拟机的共同点：跨越native边界会对优化有阻碍作用，它就像个黑箱一样让虚拟机难以分析将其内联
深入理解java虚拟机有关于方法内联的运行期编译优化说明

native Class<?> defineClass is in ClassLoader, Proxy, Unsafe 源码 ???
private native Class<?> defineClass0(String name, byte[] b, int off, int len, ProtectionDomain pd);
private native Class<?> defineClass1(String name, byte[] b, int off, int len, ProtectionDomain pd, String source);
private static native Class<?> defineClass0(ClassLoader loader, String name, byte[] b, int off, int len);
public native Class<?> defineClass(String name, byte[] b, int off, int len, ClassLoader loader, ProtectionDomain protectionDomain);

Thread:
1.init方法继承了很多parent thread(当前线程的创建线程)的字段，threadGroup一定会有，也是来自parent thread
2.start的时候会把当前thread加入到group
3.parkBlocker是给park使用的，blocker是给interrupt使用的
4.inheritableThreadLocals继承自parent thread的inheritableThreadLocals
5.join调用时caller线程进行 while (isAlive()) { wait(0); } 操作，等待目标线程死亡，目标线程死亡后会notifyAll
6.public UncaughtExceptionHandler getUncaughtExceptionHandler() {
        return uncaughtExceptionHandler != null ?
            uncaughtExceptionHandler : group; (group的默认实现 Thread.getDefaultUncaughtExceptionHandler().uncaughtException(t, e))
    }
7.isCCLOverridden 跟getContextClassLoader有关???

ClassLoader: (class, resource, package的加载机制都是一致的)
private final ProtectionDomain defaultDomain = new ProtectionDomain(new CodeSource(null, (Certificate[]) null), null, this, null);//when ProtectionDomain is null
1. ParallelLoaders: 并行加载class，每个class都有一个锁，URLClassLoader和ClassLoader都是并行加载器
2. loadClass: findLoadedClass(Returns the class if this loader has been recorded by the JVM as an initiating loader of a class) -> parent -> findBootstrapClass -> findClass(defineClass,current loader is defining loader) -> resolveClass
3. initiating class loader/defining class loader: 真正完成类的加载工作是通过调用 defineClass来实现的；而启动类的加载过程是通过调用 loadClass来实现的。前者称为定义加载器，后者称为初始加载器。两种类加载器的关联之处在于：一个类的定义加载器是它引用的其它类的初始加载器。直接调用loadClass的话JVM不知道类的初始加载器，此时类的初始加载器就是类的定义加载器。
4. protected final Class<?> defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain) throws ClassFormatError
{
	protectionDomain = preDefineClass(name, protectionDomain); // ProtectionDomain has CodeSource has Certificate, return defaultDomain when ProtectionDomain is null
	String source = defineClassSourceLocation(protectionDomain); //get URL from CodeSource, is null when ProtectionDomain is null
	Class<?> c = defineClass1(name, b, off, len, protectionDomain, source);//native call defineClass
	postDefineClass(c, protectionDomain); //set Certificate to Class
	return c;
}//defineClass(String name, byte[] b, int off, int len) -> defineClass(name,b,off,len,null)
5. getResource: parent -> getBootstrapResource (从bootstrap的URLClassPath里面加载资源getResource) -> findResource (getResourceAsStream 就是调用 getResource 然后return URL.openStream)
6. getSystemResource: SystemClassLoader == null ? getBootstrapResource : SystemClassLoader.getResource
7. getSystemClassLoader 会从sun.misc.Launcher获取classLoader(AppClassLoader), 如果java.system.class.loader有设置的话会用这个作为systemClassLoader(parent是AppClassLoader)
8. AssertionStatus ???
9. NativeLibrary ???
10. 一些被JVM直接调用的方法 ???
SecureClassLoader: 
1.只是作一些创建CL的permission检查
2. ProtectionDomain getProtectionDomain(CodeSource cs){
	ProtectionDomain pd = pdcache.get(cs);
	if (pd == null) {
		PermissionCollection perms = getPermissions(cs);// return new Permissions();返回默认的permission列表
		pd = new ProtectionDomain(cs, perms, this, null); pdcache.put(cs, pd);
	}
	return pd;
}
URLClassLoader:
1. 字段: AccessControlContext(创建CL时创建), URLClassPath(承接了所有的find resouce的操作)
2. 复写getResourceAsStream，把inputStream/jarFile放入closeables, URLClassLoader本身是Closable，close方法会关闭这些closeables以及ucp.closeLoaders()->loader.close()
3. findClass: 
	String path = name.replace('.', '/').concat(".class");
	Resource res = ucp.getResource(path, false);
	if (res != null) {
		try {
			return defineClass(name, res);{
				int i = name.lastIndexOf('.'); URL url = res.getCodeSourceURL();
				if (i != -1) -> definePackageInternal(name.substring(0, i), res.getManifest(), url);
				CodeSource cs = new CodeSource(url, res.getCodeSigners());
				return defineClass(name, res.getByteBuffer(), cs);//defineClass(name, b, getProtectionDomain(cs))
			}
		} catch (IOException e) {
			throw new ClassNotFoundException(name, e);
		}
	}
4. findResource : URL url= ucp.findResource(name, true);ucp.checkURL(url);(permission校验) //findResources可以把所有URL里面的匹配的resource找出来
5. protected PermissionCollection getPermissions(CodeSource codesource){
	PermissionCollection perms = super.getPermissions(codesource); URL url = codesource.getLocation(); URLConnection urlConnection = url.openConnection();
    Permission  p = urlConnection.getPermission(); 对p进行处理,转换成FilePermission或者SocketPermission;
	check permission; perms.add(p); return perms;
}
6. void definePackageInternal(String pkgname, Manifest man, URL url){//第一次加载package不做校验，只是保持到packages
	if (getAndVerifyPackage(pkgname, man, url) == null) {
		definePackage(pkgname, man, url);//创建package实例，放到缓存packages
	}
}
7. Package getAndVerifyPackage(String pkgname, Manifest man, URL url){
	Package pkg = getPackage(pkgname); // packages -> parent.getPackage(name) -> Package.getSystemPackage(name)
	if (pkg != null) {
		if (pkg.isSealed()) {
			if (!pkg.isSealed(url)) throw new SecurityException("sealing violation");
			//已经加载的package是sealed的, 现在加载的package不是来自同一个jar包，报错
		} else {
			if ((man != null) && isSealed(pkgname, man)) throw new SecurityException("sealing violation");
			//已经加载的package不是sealed的，现在加载的相同package是sealed的，报错
		}
	}
	return pkg;
}
URLClassPath: (paths <= urls == loaders)
1. public Resource getResource(String name, boolean check) {
        for (int i = 0; (loader = getLoader(i)) != null; i++) {//getLoader 根据URL的数量来创建对等的Loader(Loader,FileLoader,JarLoader), 注意JarLoader可能会根据manifest新增一些URL
            Resource res = loader.getResource(name, check);
            if (res != null) -> return res;
        }
        return null;
    }
2. public URL findResource(String name, boolean check) {
        for (int i = 0; (loader = getLoader(i)) != null; i++) {
            URL url = loader.findResource(name, check);//调用loader.getResource(name, check)
            if (url != null) -> return url;
        }
        return null;
    }
3. private synchronized Loader getLoader(int index) {
	while (loaders.size() < index + 1) {
		synchronized (urls) {
			if (urls.empty()) {
				return null;
			} else {
				url = urls.pop();
			}
		}
		String urlNoFragString = URLUtil.urlNoFragString(url);//移除ref字段
		if (lmap.containsKey(urlNoFragString)) -> continue;
		try {
			loader = getLoader(url);
			URL[] urls = loader.getClassPath();
			if (urls != null) -> push(urls); //扩充urls
		} catch (IOException e) {
			continue;
		}
		loaders.add(loader);lmap.put(urlNoFragString, loader);
	}
}
4. Loader getLoader(final URL url){
	String file = url.getFile();
	if (file != null && file.endsWith("/")) {
		if ("file".equals(url.getProtocol())) return new FileLoader(url);
		else return new Loader(url);
	} else return new JarLoader(url, jarHandler, lmap);
}
5. loader.getResource : jar.getJarEntry(name)存在 / new File(dir, name.replace('/', File.separatorChar))存在 -> return new URL(getBaseURL(), ParseUtil.encodePath(name, false));
-clasapath  ->  URL  ->  Loader
C:\jre\lib\ext\zipfs.jar -> file:/C:/jre/lib/ext/zipfs.jar -> JarLoader -> getResourc的实现比较复杂, manifest引入更多的URL (JarIndex MetaIndex ???)
D:\demo\target\classes -> file:/D:/demo/target/classes/ -> FileLoader -> getResource根据目录和name直接创建File并判断是否exist
其他 -> http://www.baidu.com -> Loader -> getResource会进行pre load test，校验链接有效性
Resource: 由Loader.getResource返回内部匿名类，封装getResource本地变量的值，其中URL都是根据各个Loader的 base url来生成
JarLoader 的 base url: jar:file:/C:/jre/lib/ext/zipfs.jar!/
FileLoader 的 base url 和 原来的URL一致

在jar包里面getResource返回的url格式: jar:file:/C:/jre/lib/ext/zipfs.jar!/java/junit (protocol:"jar",file:"file:/C:/jre/lib/ext/zipfs.jar!/java/junit") 此时openConnection会自动截取 jarFileURL为jar:file:/C:/jre/lib/ext/zipfs.jar 来进行getJarFile操作

URL: 只有一种，但是会根据不同的URLStreamHandler创建不同的URLConnection
URLStreamHandler: 各种protocol的handler的抽象类
URLConnection: getInputStream才真正发起连接
scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]
URL = protocol | userinfo @ host : port | path ? query # ref
	= protocol | authority   			| file         | ref
public URL(URL context, String spec, URLStreamHandler handler) throws MalformedURLException {
	start = 0; limit = spec.length();
	eliminate trailing & leading whitespace (adjust start,limit)
	skip "url:" prefix if exists (start += 4;)
	if (start < spec.length() && spec.charAt(start) == '#') -> aRef=true;
	for (i = start ; !aRef && (i < limit) && ((c = spec.charAt(i)) != '/') ; i++) {
		if (c == ':') {
			String s = spec.substring(start, i).toLowerCase();
			if (isValidProtocol(s)) {
				newProtocol = s; start = i + 1;
			}
			break;
		}
	}
	protocol = newProtocol;
	if ((context != null) &&    ((newProtocol == null) || newProtocol.equalsIgnoreCase(context.protocol))) {
		copy field from context
	}
	if (protocol == null) -> throw new MalformedURLException("no protocol: "+original);
	if (handler == null && (handler = getURLStreamHandler(protocol)) == null) {
		throw new MalformedURLException("unknown protocol: "+protocol);
	}
	this.handler = handler;
	i = spec.indexOf('#', start);
	if (i >= 0) {
		ref = spec.substring(i + 1, limit); limit = i;
	}
	handler.parseURL(this, spec, start, limit);{
		URLStreamHandler.parseURL(URL u, String spec, int start, int limit) {
			Strip off the query part (spec = spec.substring(0, queryStart))
			Parse the authority part if any
			Parse the file path if any 
			if isRelPath remove /./, /../, trailing .. , starting . , trailing .
			setURL(....)
		}
		JarHandler.parseURL(URL u, String spec, int start, int limit) {
			// 1. absolute (jar:) 2. relative (i.e. url + foo/bar/baz.ext) 3. ref-only (i.e. url + #foo)
			if (absolute) {
				file = parseAbsoluteSpec(spec);// create url of spec to check the validation
			} else if (relative) {
				file = parseContextSpec(url, spec); // if spec startWith '/', chop '/' off, if spec not startWith '/' and url.getFile not endWith '/', chop the trailing component of url.getFile
				int bangSlash = indexOfBangSlash(file); // return index of !, if index + 1 == '/' return index + 1
				String toBangSlash = file.substring(0, bangSlash); String afterBangSlash = file.substring(bangSlash);
				afterBangSlash = canonizer.canonizeString(afterBangSlash); // remove /./, /../, trailing .. , trailing .
				file = toBangSlash + afterBangSlash;
			}else{
				file = url.getFile(); 
				setup ref
			}
			setURL(url, "jar", "", -1, file, ref);
		}
	}

}
public URL(String protocol, String host, int port, String file, URLStreamHandler handler) throws MalformedURLException{
protocol = protocol.toLowerCase();
	this.protocol = protocol;
	if (host != null) {
		if (host.indexOf(':') >= 0 && !host.startsWith("[")) -> host = "["+host+"]";	
		this.host = host;
		if (port < -1) -> throw new MalformedURLException("Invalid port number :" + port);
		this.port = port;
		authority = (port == -1) ? host : host + ":" + port;
	}
	Parts parts = new Parts(file); path = parts.getPath(); query = parts.getQuery();ref = parts.getRef();
	query != null ? this.file = path + "?" + query : this.file = path;
	if (handler == null && (handler = getURLStreamHandler(protocol)) == null) {
		//URLStreamHandlerFactory创建handler 或者 根据Protocol加载对应handler(clsName = packagePrefix + "." + protocol + ".Handler";)
		//packagePrefix 可以通过java.protocol.handler.pkgs设置 或者 默认的 sun.net.www.protocol (for循环解析)
		throw new MalformedURLException("unknown protocol: " + protocol);
	}
	this.handler = handler;
}
Parts(String file) {
	int ind = file.indexOf('#'); ref = ind < 0 ? null: file.substring(ind + 1); file = ind < 0 ? file: file.substring(0, ind);
	int q = file.lastIndexOf('?');
	if (q != -1) {
		query = file.substring(q+1);
		path = file.substring(0, q);
	} else {
		path = file;
	}
}

Class: (ClassRepository genericInfo, ReflectionData reflectionData, AnnotationData annotationData)
1. public static Class<?> forName(String className) throws ClassNotFoundException {
        Class<?> caller = Reflection.getCallerClass(); return forName0(className, true, ClassLoader.getClassLoader(caller), caller);//initialize is true
    }
2. Class 无法实例化，包括反射class.newInstance和construct.newInstance也会报错
3. 如果设置了SecurityManager，很多地方会做权限检查 !!!
4. classRedefinedCount: Incremented by the VM on each call to JVM TI RedefineClasses() that redefines this class or a superclass
5. reflectionData: reflection data that might get invalidated when JVM TI RedefineClasses() is called (其实就是缓存，防止每次调用native方法取method，field和constructor)
annotationData: annotation data that might get invalidated when JVM TI RedefineClasses() is called (其实也是缓存)
6. ClassRepository genericInfo: 所有跟generic有关的接口都是从genericInfo里面获取，如果没有相应的数据则调用原来的接口获取 (getGenericInterfaces -> getInterfaces), 自带缓存
7. getEnclosingMethod，getEnclosingConstructor，getEnclosingClass (getDeclaringClass if current class is a member of another class)
8. getTypeName (如果是Array则转换 [ 到 []，或者调用getName) getName(native call) getSimpleName(截取.最后的名字,如果是array则做转换[],如果是匿名类则返回"") getCanonicalName(getName(), 如果内部类则enclosingName + "." + getSimpleName(), 如果是array则做转换[], 如果是匿名类则为null) 内部类名: OuterClass$InnerClass, OuterClass$1
9. 所有的getXXXX方法获取Class内部member，都会调用checkMemberAccess
10. getField 和 getMethod 的处理机制一样，都要考虑继承问题
11. getXXXX和getDeclaredXXXX的处理核心都是调用privateGetDeclaredXXXXX，只是一个要考虑继承，一个不用
12. getSuperclass, getInterfaces 获取class的extends和implements
13. getMethod/getMethods 不包含来自interface的static的方法
15. reflectionFactory 就是sun.reflect.ReflectionFactory，是一个singleton，整个反射领域内全局唯一
16. Annotation的实现其实使用了jdk proxy,看AnnotationInvocationHandler, AnnotationParser.parseAnnotations会创建这种proxy，数据则来源于AnnotationBytes
17. Field, Method, Constructor的equal和hashCode有特殊逻辑，Class没有覆写equal和hashCode方法
public java.security.ProtectionDomain getProtectionDomain() {
	java.security.ProtectionDomain pd = getProtectionDomain0();//native call
	if (pd == null) {
		if (allPermDomain == null) {
			java.security.Permissions perms = new java.security.Permissions();
			perms.add(SecurityConstants.ALL_PERMISSION);
			allPermDomain = new java.security.ProtectionDomain(null, perms);
		}
		pd = allPermDomain;
	}
	return pd;
}
public T newInstance(){
	checkMemberAccess -> checkPackageAccess// 根据SecurityManager的有无进行检查访问权限
	if (this == Class.class) -> throw IllegalAccessException
	Constructor<T> c = getConstructor0(empty, Member.DECLARED);
	c.setAccessible(true);int modifiers = c.getModifiers();
	if(!Reflection.quickCheckMemberAccess(this, modifiers)){ // Modifier.isPublic(getClassAccessFlags(memberClass) & modifiers)
		Reflection.ensureMemberAccess(Reflection.getCallerClass(), this, null, modifiers);// 检查当前caller是否可以调用此构造函数，否则报错
	}
	return c.newInstance((Object[])null);
}
Constructor<T> getConstructor0(Class<?>[] parameterTypes, int which){
	Constructor<T>[] constructors = privateGetDeclaredConstructors((which == Member.PUBLIC));
	for (Constructor<T> constructor : constructors) {
		if (arrayContentsEq(parameterTypes, constructor.getParameterTypes())) {// a1 == a2
			return getReflectionFactory().copyConstructor(constructor);// ReflectAccess.copyConstructor(constructor) -> constructor.copy(深拷贝,拷贝后的root指向当前constructor)
		}
	}
}
public Constructor<?>[] getConstructors() throws SecurityException {
    return copyConstructors(privateGetDeclaredConstructors(true));
}
public Constructor<?>[] getDeclaredConstructors() throws SecurityException {
	return copyConstructors(privateGetDeclaredConstructors(false));
}
private Constructor<T>[] privateGetDeclaredConstructors(boolean publicOnly){
	Constructor<T>[] res; ReflectionData<T> rd = reflectionData(); // 使用classRedefinedCount创建新的ReflectionData,但是里面的数据其实是空的
	if (rd != null) {
		res = publicOnly ? rd.publicConstructors : rd.declaredConstructors;
		if (res != null) return res;
	}
	isInterface() ? res = (Constructor<T>[]) new Constructor<?>[0] : res = getDeclaredConstructors0(publicOnly);
	if (rd != null) -> publicOnly ? rd.publicConstructors = res : rd.declaredConstructors = res; // 设置ReflectionData里面的数据
}
public Class<?>[] getClasses() { // Returns all the public classes and interfaces that are members of the class
	Class<?> currentClass = Class.this;
	while (currentClass != null) {
		Class<?>[] members = currentClass.getDeclaredClasses(); // getDeclaredClasses0
		for (int i = 0; i < members.length; i++) {
			if (Modifier.isPublic(members[i].getModifiers())) -> list.add(members[i]);
		}
		currentClass = currentClass.getSuperclass();
	}
	return list.toArray(new Class<?>[0]);
}
public Class<?>[] getDeclaredClasses() throws SecurityException {
	return getDeclaredClasses0();
}
public Field[] getFields() throws SecurityException {
	return copyFields(privateGetPublicFields(null));// copyFields -> ReflectAccess.copyField(arg) -> arg.copy()
}
public Field[] getDeclaredFields() throws SecurityException {
	return copyFields(privateGetDeclaredFields(false));
}
private Field[] privateGetPublicFields(Set<Class<?>> traversedInterfaces) {
	Field[] res;ReflectionData<T> rd = reflectionData();
	if (rd != null) {
		res = rd.publicFields;
		if (res != null) return res;
	}
	Field[] tmp = privateGetDeclaredFields(true);
    addAll(fields, tmp);
	调用 privateGetPublicFields 获取interface superClass的field
	rd.publicFields = fields;
}
private Field[] privateGetDeclaredFields(boolean publicOnly) {
	Field[] res;ReflectionData<T> rd = reflectionData();
	if (rd != null) {
		res = publicOnly ? rd.declaredPublicFields : rd.declaredFields;
		if (res != null) return res;
	}
	res = Reflection.filterFields(this, getDeclaredFields0(publicOnly));//Reflection 提供过滤fields和methods的机制，保护敏感member，需要调用registerFilter进行注册
    if (rd != null) -> publicOnly ? rd.declaredPublicFields = res : rd.declaredFields = res; 
}
public Method[] getMethods() throws SecurityException {
	return copyMethods(privateGetPublicMethods());// ReflectAccess.copyMethod(arg) -> arg.copy()
}
public Method[] getDeclaredMethods() throws SecurityException {
	return copyMethods(privateGetDeclaredMethods(false));
}
private Method[] privateGetPublicMethods() {
	Method[] res;ReflectionData<T> rd = reflectionData();
	if (rd != null) {
		res = rd.publicMethods;
		if (res != null) return res;
	}
	MethodArray methods = new MethodArray();
    methods.addAll(privateGetDeclaredMethods(true));
	MethodArray inheritedMethods = new MethodArray();
	for (Class<?> i : getInterfaces()) {
		inheritedMethods.addInterfaceMethods(i.privateGetPublicMethods());
	}
	if (!isInterface()) {
		Class<?> c = getSuperclass();
		if (c != null) {
			MethodArray supers = new MethodArray();
			supers.addAll(c.privateGetPublicMethods());
			for (int i = 0; i < supers.length(); i++) {
				Method m = supers.get(i);
				if (m != null &&!Modifier.isAbstract(m.getModifiers()) &&!m.isDefault()) {
					inheritedMethods.removeByNameAndDescriptor(m);
				}
			}
			supers.addAll(inheritedMethods);
			inheritedMethods = supers;
		}
	}
	for (int i = 0; i < methods.length(); i++) {
		Method m = methods.get(i);
		inheritedMethods.removeByNameAndDescriptor(m);
	}
	methods.addAllIfNotPresent(inheritedMethods);methods.removeLessSpecifics();methods.compactAndTrim();
	res = methods.getArray();
	rd.publicMethods = res;
}
private Method[] privateGetDeclaredMethods(boolean publicOnly) {
	Method[] res;ReflectionData<T> rd = reflectionData();
	if (rd != null) {
		res = publicOnly ? rd.declaredPublicMethods : rd.declaredMethods;
		if (res != null) return res;
	}
	res = Reflection.filterMethods(this, getDeclaredMethods0(publicOnly));
	if (rd != null) -> publicOnly ? rd.declaredPublicMethods = res : rd.declaredMethods = res; 
}
static class MethodArray{
	void addInterfaceMethods(Method[] methods) // if (!Modifier.isStatic(candidate.getModifiers())) add(candidate)
	void removeByNameAndDescriptor(Method toRemove) //比较return type的class，name， parameter types的class，不涉及generic
	void compactAndTrim() // remove null method from array
	void removeLessSpecifics() // remove less specific default method
	static boolean hasMoreSpecificClass(Method m1, Method m2) {
		Class<?> m1Class = m1.getDeclaringClass(); Class<?> m2Class = m2.getDeclaringClass();
		return m1Class != m2Class && m2Class.isAssignableFrom(m1Class);
	}
}
//getField(String)和getDeclaField(String)最后调用此函数
private static Field searchFields(Field[] fields, String name) {
	if (fields[i].getName() == name.intern()) return getReflectionFactory().copyField(fields[i]);
}
//getMethod(String, Class...)和getDeclaredMethod(String,Class...)最后调用此函数
private static Method searchMethods(Method[] methods,String name,Class<?>[] parameterTypes){
	for (int i = 0; i < methods.length; i++) {
		Method m = methods[i];
		if (m.getName() == name.intern()
			&& arrayContentsEq(parameterTypes, m.getParameterTypes())
			&& (res == null || res.getReturnType().isAssignableFrom(m.getReturnType())))
			res = m;
	}
	return (res == null ? res : getReflectionFactory().copyMethod(res));
}
private native Field[]       getDeclaredFields0(boolean publicOnly);
private native Method[]      getDeclaredMethods0(boolean publicOnly);
private native Constructor<T>[] getDeclaredConstructors0(boolean publicOnly);
private native Class<?>[]   getDeclaredClasses0();

public InputStream getResourceAsStream(String name) { //getResource相似
	name = resolveName(name); // name starts wtih '/' then name.substring(1) otherwise package_name/name
	ClassLoader cl = getClassLoader0();
	if (cl==null) -> return ClassLoader.getSystemResourceAsStream(name);
	return cl.getResourceAsStream(name);
}

public <A extends Annotation> A getAnnotation(Class<A> annotationClass) // return (A) annotationData().annotations.get(annotationClass);
public Annotation[] getAnnotations() // return AnnotationParser.toArray(annotationData().annotations);
public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationClass) // return (A) annotationData().declaredAnnotations.get(annotationClass);
public Annotation[] getDeclaredAnnotations() // return AnnotationParser.toArray(annotationData().declaredAnnotations);

public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationClass) { 		
	return AnnotationSupport.getAssociatedAnnotations(annotationData.declaredAnnotations,this,annotationClass);{
		A[] result = getDirectlyAndIndirectlyPresent(declaredAnnotations, annoClass);
		if(AnnotationType.getInstance(annoClass).isInherited()) {
            Class<?> superDecl = decl.getSuperclass();
            while (result.length == 0 && superDecl != null) {
                result = getDirectlyAndIndirectlyPresent(LANG_ACCESS.getDeclaredAnnotationMap(superDecl), annoClass);superDecl = superDecl.getSuperclass();
            }
        }
        return result; // result is overriden ???
	}
}
public <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> annotationClass){
	return AnnotationSupport.getDirectlyAndIndirectlyPresent(annotationData().declaredAnnotations,annotationClass);{
		A direct = (A) annotations.get(annoClass); result.add(direct);
		A[] indirect = getIndirectlyPresent(annotations, annoClass);{
			Repeatable repeatable = annoClass.getDeclaredAnnotation(Repeatable.class);Class<? extends Annotation> containerClass = repeatable.value();
			Annotation container = annotations.get(containerClass);
			A[] valueArray = getValueArray(container); return valueArray;
		}
		result.addAll(Arrays.asList(indirect)); return result;
	}
}

private AnnotationData createAnnotationData(int classRedefinedCount) { // annotationData() 会调用此方法
	Map<Class<? extends Annotation>, Annotation> declaredAnnotations =
		AnnotationParser.parseAnnotations(getRawAnnotations(), getConstantPool(), this);
	Class<?> superClass = getSuperclass();
	Map<Class<? extends Annotation>, Annotation> annotations = null;
	if (superClass != null) {
		Map<Class<? extends Annotation>, Annotation> superAnnotations = superClass.annotationData().annotations;
		for (Map.Entry<Class<? extends Annotation>, Annotation> e : superAnnotations.entrySet()) {
			Class<? extends Annotation> annotationClass = e.getKey();
			if (AnnotationType.getInstance(annotationClass).isInherited()) { //这一点判断是否inherited很重要
				//AnnotationType.getInstance(annotationClass) 会把annotationClass的 AnnotationType annotationType 字段设上值
				if (annotations == null) -> annotations = new LinkedHashMap<>();
				annotations.put(annotationClass, e.getValue());
			}
		}
	}
	annotations == null ? annotations = declaredAnnotations : annotations.putAll(declaredAnnotations);
	return new AnnotationData(annotations, declaredAnnotations, classRedefinedCount);
}
public AnnotatedType getAnnotatedSuperclass() {
	if (this == Object.class || isInterface() || isArray() || isPrimitive() || this == Void.TYPE) return null;
	return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(), getConstantPool(), this);
}
public AnnotatedType[] getAnnotatedInterfaces() {
	 return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(), getConstantPool(), this);
}

AccessibleObject:
volatile Object securityCheckCache;//A more complicated security check cache can be either null (empty cache), a 2-array of {caller,target},or a caller
public boolean isAccessible() // return override;
public void setAccessible(boolean flag){
	setAccessible0(this, flag);{
		if (obj instanceof Constructor && flag == true) {
            Constructor<?> c = (Constructor<?>)obj;
            if (c.getDeclaringClass() == Class.class) -> throw new SecurityException("Cannot make a java.lang.Class constructor accessible");
        }
        obj.override = flag;
	}
}
void checkAccess(Class<?> caller, Class<?> clazz, Object obj, int modifiers) throws IllegalAccessException{ //检查access权限并保存结果
	if (caller == clazz) -> return;  
	Object cache = securityCheckCache;  // read volatile
	Class<?> targetClass = clazz;
	if (obj != null && Modifier.isProtected(modifiers) && ((targetClass = obj.getClass()) != clazz)) { // Must match a 2-array of { caller, targetClass }.
		if (cache instanceof Class[]) {
			Class<?>[] cache2 = (Class<?>[]) cache;
			if (cache2[1] == targetClass && cache2[0] == caller) -> return;	
		}
	} else if (cache == caller) {// Non-protected case (or obj.class == this.clazz).
		return;
	}
	Reflection.ensureMemberAccess(caller, clazz, obj, modifiers);
	securityCheckCache = ((targetClass == clazz) ? caller : new Class<?>[] { caller, targetClass });
}
Field:
public Object get(Object obj) throws IllegalArgumentException, IllegalAccessException{//所有的get/set方法 都依靠FieldAccessor来获取值或者设置值，且都会先判断override
	if (!override) {
		if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
			checkAccess(Reflection.getCallerClass(), clazz, obj, modifiers);
		}
	}
	return getFieldAccessor(obj).get(obj);
}
private FieldAccessor getFieldAccessor(Object obj) throws IllegalAccessException{
	FieldAccessor a = (override) ? overrideFieldAccessor : fieldAccessor;
	return (a != null) ? a : acquireFieldAccessor(override);
}
private FieldAccessor acquireFieldAccessor(boolean overrideFinalCheck) {
	if (root != null) tmp = root.getFieldAccessor(overrideFinalCheck);
	if (tmp != null) {
		overrideFinalCheck ? overrideFieldAccessor = tmp : fieldAccessor = tmp;
	} else {
		tmp = reflectionFactory.newFieldAccessor(this, overrideFinalCheck);
		setFieldAccessor(tmp, overrideFinalCheck);// 根据overrideFinalCheck设置到fieldAccessor或者overrideFieldAccessor,同时调用root的setFieldAccessor
	}
	return tmp;
}
//method和constructor的相对应的Annotation方法也是这样实现的:
public <T extends Annotation> T getAnnotation(Class<T> annotationClass) // annotationClass.cast(declaredAnnotations().get(annotationClass));
public Annotation[] getDeclaredAnnotations()  // return AnnotationParser.toArray(declaredAnnotations());
public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass) //AnnotationSupport获取对应的Annotation
public AnnotatedType getAnnotatedType() //TypeAnnotationParser.buildAnnotatedType创建对应的AnnotatedTypeImpl
private synchronized  Map<Class<? extends Annotation>, Annotation> declaredAnnotations() {
	if (declaredAnnotations == null) {
		root != null ? declaredAnnotations = root.declaredAnnotations() : declaredAnnotations = AnnotationParser.parseAnnotations(getAnnotationBytes(),
					sun.misc.SharedSecrets.getJavaLangAccess().getConstantPool(getDeclaringClass()),getDeclaringClass());  
	}
	return declaredAnnotations;
}
Method:
public Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException,InvocationTargetException{
	//override 校验
	MethodAccessor ma = methodAccessor; 
	if (ma == null) -> ma = acquireMethodAccessor();
	return ma.invoke(obj, args);
}
private MethodAccessor acquireMethodAccessor() {
	if (root != null) tmp = root.getMethodAccessor();
	if (tmp != null) {
		methodAccessor = tmp;
	} else {
		tmp = reflectionFactory.newMethodAccessor(this);
		setMethodAccessor(tmp);// 设置到methodAccessor,同时调用root的setMethodAccessor
	}
	return tmp;
}
其他的方法 ???
Constructor:
public T newInstance(Object ... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
	//override 校验
	if ((clazz.getModifiers() & Modifier.ENUM) != 0) -> throw new IllegalArgumentException("Cannot reflectively create enum objects");
	ConstructorAccessor ca = constructorAccessor; 
	if (ca == null) -> ca = acquireConstructorAccessor();
	return (T) ca.newInstance(initargs);
}
其他的方法 ???
ReflectionFactory:
public FieldAccessor newFieldAccessor(Field field, boolean override) {
	return UnsafeFieldAccessorFactory.newFieldAccessor(field, override);{
		boolean isStatic = Modifier.isStatic(field.getModifiers());
        boolean isFinal = Modifier.isFinal(field.getModifiers());
        boolean isVolatile = Modifier.isVolatile(field.getModifiers());
        boolean isQualified = isFinal || isVolatile;
        boolean isReadOnly = isFinal && (isStatic || !override);
		//根据isStatic创建不同的UnsafeFieldAccessorImpl(使用unsafe访问offset地址获取field的值)
		//isReadOnly的UnsafeFieldAccessorImpl不支持set操作，会报错
	}
}
public MethodAccessor newMethodAccessor(Method method) {
	if (noInflation && !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) {//VM define的匿名类(Unsafe#defineAnonymousClass)，和普通的匿名内部类不同
		return new MethodAccessorGenerator().generateMethod(method.getDeclaringClass(), method.getName(), method.getParameterTypes(), method.getReturnType(),method.getExceptionTypes(),method.getModifiers());
		//动态生成class结构byte数组并使用declaringClass.getClassLoader()加载, Class:sun/reflect/MethodAccessorImpl, name:"sun/reflect/GeneratedMethodAccessor"+num
	} else {
		NativeMethodAccessorImpl acc = new NativeMethodAccessorImpl(method);
		DelegatingMethodAccessorImpl res = new DelegatingMethodAccessorImpl(acc);
		acc.setParent(res);
		return res;
	}
}
public ConstructorAccessor newConstructorAccessor(Constructor<?> c) {
	Class<?> declaringClass = c.getDeclaringClass();
	if (Modifier.isAbstract(declaringClass.getModifiers())) -> return new InstantiationExceptionConstructorAccessorImpl(null);
	if (declaringClass == Class.class) -> return new InstantiationExceptionConstructorAccessorImpl("Can not instantiate java.lang.Class");
	//we use Class.newInstance() in the ConstructorAccessor generation process, we have to break the cycle here.
	if (Reflection.isSubclassOf(declaringClass, ConstructorAccessorImpl.class)) -> return new BootstrapConstructorAccessorImpl(c);
	if (noInflation && !ReflectUtil.isVMAnonymousClass(c.getDeclaringClass())) {
		return new MethodAccessorGenerator().generateConstructor(c.getDeclaringClass(),c.getParameterTypes(),c.getExceptionTypes(),c.getModifiers());
	} else {
		NativeConstructorAccessorImpl acc =new NativeConstructorAccessorImpl(c);
		DelegatingConstructorAccessorImpl res = new DelegatingConstructorAccessorImpl(acc);
		acc.setParent(res);
		return res;
	}
}

protected Reifier getReifier(){return Reifier.make(getFactory());}
protected AbstractRepository(String rawSig, GenericsFactory f) {
    tree = parse(rawSig); //get the instance of subclass of Tree
    factory = f;
}
AbstractRepository has GenericsFactory and Tree(AST subtree), Tree and subclasses have only one TypeTreeVisitor(Reifier, all methods are using GenericsFactory to create Type impl)
-> FieldRepository(genericType)
-> GenericDeclRepository(typeParams) // 依靠TypeTreeVisitor来解析Signature(class文件里关于generic的内容)，解析结果交给GenericsFactory来创建各种generic Type
	-> ClassRepository(superClass,interfaces)
	-> ConstructorRepository(paramTypes,exceptionTypes) -> MethodRepository (returnType)

MagicAccessorImpl
-> FieldAccessorImpl -> UnsafeFieldAccessorImpl
-> MethodAccessorImpl
	-> DelegatingMethodAccessorImpl
	-> NativeMethodAccessorImpl
-> ConstructorAccessorImpl
	-> DelegatingConstructorAccessorImpl
	-> NativeConstructorAccessorImpl
	-> BootstrapConstructorAccessorImpl
	
annotation数据(raw byte array RawAnnotations)放到了attribute里面(AnnotationParser会解析)，generic数据(String)放到了signature里面(AST subtree visitor)
annotatedType数据(raw byte array RawTypeAnnotations)放到了attribute里面(TypeAnnotationParser会解析)
Type,AnnotatedType都有对应的impl, 它们由CoreReflectionFactory(GenericsFactory), AnnotatedTypeFactory来生成
AnnotationType 是对Annotation的抽象

Proxy:
Cache mapping pairs of {(key, sub-key) -> value},Keys and values are weakly but sub-keys are strongly referenced.
private static final WeakCache<ClassLoader, Class<?>[], Class<?>> proxyClassCache = new WeakCache<>(new KeyFactory(), new ProxyClassFactory());
ProxyClassFactory(valueFactory)使用ClassLoader加载生成的Proxy class文件最终生成Class；KeyFactory(subKeyFactory)使用Class<?>[]接口数组生成key；
ClassLoaderA -> interfacesA -> ProxyA1
			 -> interfacesB -> ProxyB1
ClassLoaderB -> interfacesA	-> ProxyA2
			 -> interfacesB	-> ProxyB2
所有生成的proxy class都extends java.lang.reflect.Proxy，并且implements 所有的interfaces，
public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h){
	Class<?> cl = getProxyClass0(loader, interfaces);//KeyFactory.apply + ProxyClassFactory.apply
	final Constructor<?> cons = cl.getConstructor(constructorParams);//Class<?>[] constructorParams = { InvocationHandler.class };
	return cons.newInstance(new Object[]{h});
}
KeyFactory:
public Object apply(ClassLoader classLoader, Class<?>[] interfaces) {
	switch (interfaces.length) {
		case 1: return new Key1(interfaces[0]); // the most frequent
		case 2: return new Key2(interfaces[0], interfaces[1]);
		case 0: return key0; //key0 = new Object()
		default: return new KeyX(interfaces);
	}
}
ProxyClassFactory: just Methods are intercepted by InvocationHandler
public Class<?> apply(ClassLoader loader, Class<?>[] interfaces) {
	for (Class<?> intf : interfaces) {
		load the intf with loader, Verify that the intf is visible to the loader.
		Verify that the intf is interface,Verify that the intf is not repeat.
	}
	int accessFlags = Modifier.PUBLIC | Modifier.FINAL;
	for (Class<?> intf : interfaces) {
		check the intf is package private, proxyPkg = pkg(package of the intf, endsWith ".");accessFlags=Modifier.FINAL;
		if more than one intf is package private throw exception
	}
	if(proxyPkg == null) -> proxyPkg = "com.sun.proxy.";
	String proxyName = proxyPkg + "$Proxy" + num;
	byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);{
		addProxyMethod(hashCodeMethod, Object.class);
        addProxyMethod(equalsMethod, Object.class);
        addProxyMethod(toStringMethod, Object.class);
        for (Class<?> intf : interfaces) {
            for (Method m : intf.getMethods()) {
                addProxyMethod(m, intf);
            }
        }
		check the method signture make sure no conflicts
		methods.add(generateConstructor());//new MethodInfo("<init>", "(Ljava/lang/reflect/InvocationHandler;)V",ACC_PUBLIC)
		for (List<ProxyMethod> sigmethods : proxyMethods.values()) {
			for (ProxyMethod pm : sigmethods) {
				fields.add(new FieldInfo(pm.methodFieldName,"Ljava/lang/reflect/Method;",ACC_PRIVATE | ACC_STATIC));//methodFieldName = "m" + proxyMethodCount++;
				methods.add(pm.generateMethod());//new MethodInfo(methodName, desc, ACC_PUBLIC | ACC_FINAL); desc create from parameterTypes and returnType
			}
		}
		methods.add(generateStaticInitializer());//new MethodInfo("<clinit>", "()V", ACC_STATIC)
	}
    return defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);
}

Exception:
1.如果一个异常是致命的，不可恢复的。或者调用者去捕获它没有任何益处，使用unChecked异常。
如果一个异常是可以恢复的，可以被调用者正确处理的，使用checked异常。
在使用unChecked异常时，必须在在方法声明中详细的说明该方法可能会抛出的unChekced异常。由调用者自己去决定是否捕获unChecked异常
2.为了避免系统级的checked异常对业务系统的深度侵入，我们可以为业务方法定义一个业务系统自己的异常。针对像SQLException,RemoteException这些非常严重的异常，我们可以新定义一个unChecked的异常，然后把SQLException，RemoteException封装成unChecked异常后抛出。如果这个系统级的异常是要交由上一级调用者处理的，可以新定义一个checked的业务异常，然后把系统级的异常封存装成业务级的异常后再抛出。
3. 整个业务层只定义了一个异常类 (不同的异常应该有不同的实现，参考spring的异常设计)，业务异常不应该是Unchecked Exception。 顶层处理异常时只有catch一个Exception。
4. 关于异常控制业务流程，参考"Java异常处理和设计"网页

静态代理: 编译时织入（特殊编译器实现）、类加载时织入（特殊的类加载器实现）
动态代理: 运行时织入（jdk动态代理（基于接口来实现）、CGlib（基于类实现））
类加载时织入: 
1.agent方式，使用JVMTI将aspectjweaver.jar作为agent
2.替换系统加载器，AppClassLoader -> WeavingURLClassLoader
3.自定义类加载器，可以精细化控制织入的类
运行时织入:
通过动态生成class文件，替换原来的类