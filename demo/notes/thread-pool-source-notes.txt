public abstract class AbstractExecutorService implements ExecutorService{
	public <T> Future<T> submit(Callable<T> task) {
        RunnableFuture<T> ftask = newTaskFor(task);
        execute(ftask);
        return ftask;
    }
	
	protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {
        return new FutureTask<T>(callable);
    }
	//submit 有Runnable作为形参的方法, 通过RunnableAdapter把Runnable转为Callable,再生成RunnableFuture作为返回值
	
	static final class RunnableAdapter<T> implements Callable<T> {
        final Runnable task;
        final T result;
        RunnableAdapter(Runnable task, T result) {
            this.task = task;
            this.result = result;
        }
        public T call() {
            task.run();
            return result;
        }
    }
}

ThreadPoolExecutor extends AbstractExecutorService
{
	private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
	private static final int COUNT_BITS = Integer.SIZE - 3;//32 - 3 = 29
    private static final int CAPACITY   = (1 << COUNT_BITS) - 1;//000低位全是1

    // runState is stored in the high-order bits
    private static final int RUNNING    = -1 << COUNT_BITS;//111低位全是0
    private static final int SHUTDOWN   =  0 << COUNT_BITS;//000低位全是0
    private static final int STOP       =  1 << COUNT_BITS;//001低位全是0
    private static final int TIDYING    =  2 << COUNT_BITS;//010低位全是0
    private static final int TERMINATED =  3 << COUNT_BITS;//011低位全是0
	
	private static int runStateOf(int c)     { return c & ~CAPACITY; }//32位的高三位是run state
    private static int workerCountOf(int c)  { return c & CAPACITY; }//32位的低位是worker数量
    private static int ctlOf(int rs, int wc) { return rs | wc; }//把running state和worker数量合并,作为初始化
	
	private final ReentrantLock mainLock = new ReentrantLock();
	private final Condition termination = mainLock.newCondition();

	private boolean compareAndIncrementWorkerCount(int expect) { return ctl.compareAndSet(expect, expect + 1);}
	private boolean compareAndDecrementWorkerCount(int expect) { return ctl.compareAndSet(expect, expect - 1);}
	private void decrementWorkerCount() { do {} while (! compareAndDecrementWorkerCount(ctl.get()));}

	final void runWorker(Worker w) { //wt就是Woker的thread属性
		Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; w.unlock();//allow interrupts(call setState(0))
		while (task != null || (task = getTask()) != null) {
			w.lock();
			(runStateAtLeast(ctl.get(), STOP) ||(Thread.interrupted() &&runStateAtLeast(ctl.get(), STOP))) && !wt.isInterrupted()) -> wt.interrupt();
			try{ 
				beforeExecute(wt, task); 
				try{task.run();}catch(Throwable x){throw x;}finally{afterExecute(task, thrown);} 
			}finally{task = null; w.completedTasks++; w.unlock();}
		}
		completedAbruptly = false; 
		finally{processWorkerExit(w, completedAbruptly);}
	}
	private Runnable getTask() {
		boolean timedOut = false; // Did the last poll() time out?
		for{
			rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty()) -> decrementWorkerCount(); return null;
			boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;
			(wc > maximumPoolSize || (timed && timedOut)) && (wc > 1 || workQueue.isEmpty()) -> compareAndDecrementWorkerCount(c) -> return null;
																							 -> continue;
			try{
				Runnable r = timed ? workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : workQueue.take();
				r != null -> return r;
				timedOut = true;
			}catch(InterruptedException){ timedOut = false;}
		}
	}
	private void processWorkerExit(Worker w, boolean completedAbruptly) {
		completedAbruptly -> decrementWorkerCount();
		mainLock.lock(); completedTaskCount += w.completedTasks; workers.remove(w); mainLock.unlock();
		tryTerminate();
		runStateLessThan(c, STOP) -> !completedAbruptly -> workerCountOf(c) >= allowCoreThreadTimeOut ? 0 : corePoolSize -> return;
								  -> addWorker(null, false);
	}
	tryTerminate(){
		for{
			isRunning(c) || runStateAtLeast(c, TIDYING) || (runStateOf(c) == SHUTDOWN && ! workQueue.isEmpty()) -> return;
			workerCountOf(c) != 0 -> interruptIdleWorkers(true); return;
			mainLock.lock(); ctl.compareAndSet(c, ctlOf(TIDYING, 0) -> try{ terminated(); } finally{ctl.set(ctlOf(TERMINATED, 0));termination.signalAll();}
			mainLock.unlock();
		}
	}
	private boolean addWorker(Runnable firstTask, boolean core){
		retry: for{
			rs >= SHUTDOWN && (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty()) -> return false;
			for{
				wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize) -> return false;
				compareAndIncrementWorkerCount(c) -> break retry;
				runStateOf(c) != rs -> continue retry;
			}
		}
		try {
			w = new Worker(firstTask); t = w.thread;
			t != null -> mainLock.lock(); try{ rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null) -> workers.add(w); workerAdded = true; } finally{mainLock.unlock();}
			workerAdded -> t.start(); workerStarted = true;
		}finally{ ! workerStarted -> addWorkerFailed(w);}
		return workerStarted;
	}
	private void addWorkerFailed(Worker w){
		workers.remove(w);decrementWorkerCount();tryTerminate();
	}
	
	public void execute(Runnable command) {
		workerCountOf(c) < corePoolSize) -> addWorker(command, true)) -> return;
										 ->	c = ctl.get();
		if isRunning(c) && workQueue.offer(command) -> recheck = ctl.get(); -> ! isRunning(recheck) && remove(command) -> reject(command);
																		 -> workerCountOf(recheck) == 0 -> addWorker(null, false);
		else !addWorker(command, false) -> reject(command);
	}
	public boolean remove(Runnable task) {
        boolean removed = workQueue.remove(task); tryTerminate(); // In case SHUTDOWN and now empty
		return removed;
    }
	final void reject(Runnable command) { handler.rejectedExecution(command, this);}
	
	public boolean awaitTermination(long timeout, TimeUnit unit){
		mainLock.lock(); 
		for{
			if (runStateAtLeast(ctl.get(), TERMINATED)) return true;
			if (nanos <= 0) return false;
			nanos = termination.awaitNanos(nanos);
		}finally{mainLock.unlock()}
	}
	public void shutdown() {
		mainLock.lock();
        try {
			checkShutdownAccess();//check the access permission to the thread of worker
			advanceRunState(SHUTDOWN);//set run state to shutdown
			interruptIdleWorkers();//interruptIdleWorkers(false);
		}finally{mainLock.unlock()}
		tryTerminate();
	}
	private void interruptIdleWorkers(boolean onlyOne) {
		mainLock.lock(); 
		try{
			for(Worker w : workers){
				!t.isInterrupted() && w.tryLock() -> try{t.interrupt();}finally{w.unlock()}
				onlyOne -> break;
			}
		}finally{mainLock.unlock()}
	}
	public List<Runnable> shutdownNow() {
		mainLock.lock();
        try {
			checkShutdownAccess();//check the access permission to the thread of worker
			advanceRunState(STOP);//set run state to shutdown
			interruptWorkers();//interrupt all workers with worker.interruptIfStarted();
			tasks = drainQueue();//返回所有的未开始task
		}finally{mainLock.unlock()}
		tryTerminate();return tasks;
	}
	void onShutdown() {
    }
	
	do nothing:
	protected void beforeExecute(Thread t, Runnable r) { }
	protected void afterExecute(Runnable r, Throwable t) { }
	protected void terminated(){} 
}

private final class Worker extends AbstractQueuedSynchronizer implements Runnable
{
	/** Thread this worker is running in.  Null if factory fails. */
	final Thread thread;
	/** Initial task to run.  Possibly null. */
	Runnable firstTask;
	/** Per-thread task counter */
	volatile long completedTasks;

	Worker(Runnable firstTask) {
		setState(-1); // inhibit interrupts until runWorker ?????
		this.firstTask = firstTask;
		this.thread = getThreadFactory().newThread(this);
	}

	public void run() {
		runWorker(this);
	}

	protected boolean isHeldExclusively() {
		return getState() != 0;
	}

	//不可重入,参数unused
	protected boolean tryAcquire(int unused) {
		if (compareAndSetState(0, 1)) {
			setExclusiveOwnerThread(Thread.currentThread());
			return true;
		}
		return false;
	}

	protected boolean tryRelease(int unused) {
		setExclusiveOwnerThread(null);
		setState(0);
		return true;
	}

	public void lock()        { acquire(1); }
	public boolean tryLock()  { return tryAcquire(1); }
	public void unlock()      { release(1); }
	public boolean isLocked() { return isHeldExclusively(); }

	void interruptIfStarted() {
		Thread t;
		if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {
			try {
				t.interrupt();
			} catch (SecurityException ignore) {
			}
		}
	}
}
	

public class FutureTask<V> implements RunnableFuture<V> {
	private volatile int state;
	private static final int NEW          = 0;
    private static final int COMPLETING   = 1;
    private static final int NORMAL       = 2;
    private static final int EXCEPTIONAL  = 3;
    private static final int CANCELLED    = 4;
    private static final int INTERRUPTING = 5;
    private static final int INTERRUPTED  = 6;
	
	/** The underlying callable; nulled out after running */
    private Callable<V> callable;
    /** The result to return or exception to throw from get() */
    private Object outcome; // non-volatile, protected by state reads/writes
    /** The thread running the callable; CASed during run() */
    private volatile Thread runner;
    /** Treiber stack of waiting threads */
    private volatile WaitNode waiters;
	
	static final class WaitNode { //从头加入到waiters，单向链表, 指向next
        volatile Thread thread;
        volatile WaitNode next;
        WaitNode() { thread = Thread.currentThread(); }
    }
	
	public boolean isCancelled() {
        return state >= CANCELLED;
    }

    public boolean isDone() {
        return state != NEW;
    }
	
	public void run() {
		state != NEW || !UNSAFE.compareAndSwapObject(this, runnerOffset, null, Thread.currentThread()) -> return;
		try {
            Callable<V> c = callable;
            if (c != null && state == NEW) {
                try {
                    result = c.call(); ran = true;
                } catch (Throwable ex) {
                    result = null; ran = false; setException(ex);
                }
                ran -> set(result);
            }
        } finally {
            runner = null;
            int s = state;
            if (s >= INTERRUPTING)
                handlePossibleCancellationInterrupt(s);
        }
	}
	private void handlePossibleCancellationInterrupt(int s) {
		if (s == INTERRUPTING)
            while (state == INTERRUPTING)
                Thread.yield();
	}
	protected void set(V v) {
		UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING) -> outcome = t; UNSAFE.putOrderedInt(this, stateOffset, NORMAL); finishCompletion();
    }
	protected void setException(Throwable t) {
        UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING) -> outcome = t; UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL); finishCompletion();
    }
	private void finishCompletion() {
        for (WaitNode q; (q = waiters) != null;) {
            if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) {
                for (;;) {
                    Thread t = q.thread;
                    t != null -> q.thread = null; LockSupport.unpark(t);
                    WaitNode next = q.next;
                    next == null -> break;
                    q = next;
                }
                break;
            }
        }
        done();
    }
	protected void done() { }
	
	public V get() throws InterruptedException, ExecutionException { //带超时的参数会多throw一个TimeoutException
        s <= COMPLETING -> s = awaitDone(false, 0L);
        return report(s);
    }
	private V report(int s) throws ExecutionException {
		s == NORMAL -> return outcome;
		s >= CANCELLED -> throw new CancellationException();
		throw new ExecutionException((Throwable)x);
	}
	private int awaitDone(boolean timed, long nanos){
		WaitNode q = null;boolean queued = false;
		for (;;) {
			if Thread.interrupted() -> removeWaiter(q); throw new InterruptedException();
			elseif s > COMPLETING -> { q != null -> q.thread = null;
									return s;}
			elseif s == COMPLETING -> Thread.yield();
			elseif q == null -> q = new WaitNode();
			elseif !queued -> queued = UNSAFE.compareAndSwapObject(this, waitersOffset, q.next = waiters, q);
			elseif timed ->  { nanos = deadline - System.nanoTime(); nanos <= 0L -> removeWaiter(q); return state;
							LockSupport.parkNanos(this, nanos);}
			else LockSupport.park(this);
		}
	}
	private void removeWaiter(WaitNode node) { set node.thread to null and traverse all waiters to delete node with null thread }
	
	public boolean cancel(boolean mayInterruptIfRunning) {
		!(state == NEW && UNSAFE.compareAndSwapInt(this, stateOffset, NEW, mayInterruptIfRunning ? INTERRUPTING : CANCELLED)) -> return false;
        mayInterruptIfRunning ->  runner != null ? runner.interrupt() : nothing ; UNSAFE.putOrderedInt(this, stateOffset, INTERRUPTED);
        finishCompletion();return true;
	}
}

guava16.0.1:(版本不一样实现不一样)
com.google.common.util.concurrent.ListenableFuture:
1. ListenableFutureTask继承自FutureTask，只是复写了done方法来触发listener
2. AbstractFuture只是一个同步器，内置一个ASQ，有多种实现，在set方法里触发listener
netty4.0.34:(nio的坑，netty的坑，tcp协议带来的稳定性问题，buffer池，heapedwheeltimer，unsafe底层的操作)
数据流转:
in: eventLoop -> javaSelector -> unsafe -> channel -> channelPipeline -> channelHandlerContext -> channelHandler
out: channel -> channelPipeline -> channelHandlerContext -> channelHandler -> unsafe -> javaChannel
io.netty.util.concurrent.Future:
1. Future(同步器synchronized), Promise(set方法), ProgressivePromise(setProgress方法)各有特色，ChannelFuture只是它们三者的具体实现并和它们三者一一对应(ChannelFuture对应Future)
2. ChannelFuture是三者的Void实现(Future<Void>)
io.netty.util.concurrent.EventExecutorGroup:
1. 主要逻辑在MultithreadEventExecutorGroup和SingleThreadEventExecutor, 一个group包含多个单体，单体是一个特殊的group，单体的parent是group，group拥有EventExecutorChooser来next选择一个单体
2. EventExecutor继承自EventExecutorGroup继承自ScheduledExecutorService，AbstractEventExecutor继承自AbstractExecutorService
io.netty.channel.nio.NioEventLoop:
1. rebuildSelector解决jdk不停空select的bug
2. cancel key时调用selectNow为了解决time wait问题，cancel只会把key放到cancelKeySet里面，selectNow会真正关闭socketfd
io.netty.channel.Channel:
1. 基本所有的要素都在channel里面，包括产生各种Future，默认使用eventLoop(ChannelHandlerContext也能产生各种Future,默认使用context自带的executor)
2. 拥有Unsafe(不是java的Unsafe)来封装处理底层IO
3. Channel包含一个ChannelPipeLine，ChannelPipeLine里面包含多个ChannelHandlerContext，每个ChannelHandlerContext包含一个ChannelHandler(这是调用的顺序,doBind0就是例子)
io.netty.channel.Channel.Unsafe:
1. 每个channel带一个unsafe实现，unsafe的实现又会调用channel的接口，NioUnsafe的close和disconnect都是调用NioChannel的doClose方法
2. channel和unsafe的设计采用了模板方法模式，把各个不同的channel实现封装在channel接口，unsafe调用channel接口达到多种实现
io.netty.channel.ChannelHandler:
1. 每个ChannelHandler都有一个ChannelHandlerContext，ChannelHandlerContext的executor默认就是channel的eventLoop,除非addLast时传入executor
2. ChannelPipeline的执行顺序: inbound -> 从head到tail, outbound -> 从tail到head， addLast是加到tail的前面
3. ChannelHandlerContext作为驱动器，会判断线程是否在executor里面，然后调用ChannelHandler的方法
4. DefaultChannelPipeline有一个HeadHandler(Outbound)和一个TailHandler(Inbound),HeadHandler拥有Unsafe会处理bind和connect等等,其他的Handler都加到Head和Tail之间
io.netty.bootstrap.AbstractBootstrap:
1. 只能配置一个handler和一个group和一个channel
2. 一个bind只能把一个ServerSocketChannel注册到一个EventLoop上面，又不能重复bind相同的socket，所以accept线程只有一个!!!
ChannelOutboundBuffer:
1. write会写入这个buffer，等待flush，isWritable跟WaterMark的配置有关
bind{
	ChannelFuture regFuture = initAndRegister(){
		final Channel channel = channelFactory().newChannel(); -> NioServerSocketChannel(初始化,NON-BLOCK,设置OP_ACCEPT;Selector在EventLoop里面)
		init(channel){
			ChannelPipeline p = channel.pipeline();
			if (handler() != null) {
				p.addLast(handler()); -> handler(parent的handler)
			}
			p.addLast(new ChannelInitializer<Channel>() {
				@Override
				public void initChannel(Channel ch) throws Exception {//channelRegistered时调用initChannel
					ch.pipeline().addLast(new ServerBootstrapAcceptor(
							currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));
				}
			});
		}
		ChannelFuture regFuture = group().register(channel); -> next().register(channel) -> channel.unsafe().register(this, promise);{ -> this(EventLoop)
			AbstractUnsafe.register(EventLoop eventLoop, final ChannelPromise promise){
				AbstractChannel.this.eventLoop = eventLoop;
				register0(promise){
					doRegister(); -> selectionKey = javaChannel().register(eventLoop().selector, 0, this); -> this(AbstractNioUnsafe)
					pipeline.fireChannelRegistered();
					if (isActive()) {
						pipeline.fireChannelActive();
					}
				}
			}
		}
		return regFuture;
	}
	if (regFuture.isDone()) {
            promise = channel.newPromise();
            doBind0(regFuture, channel, localAddress, promise);
	} else {
		// Registration future is almost always fulfilled already, but just in case it's not.
		promise = new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE);
		regFuture.addListener(new ChannelFutureListener() {
			@Override
			public void operationComplete(ChannelFuture future) throws Exception {
				doBind0(regFuture, channel, localAddress, promise);
			}
		});
	}
}
doBind0(){
	channel.eventLoop().execute(() -> {
			if (regFuture.isSuccess()) {
				channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);{
					pipeline.bind(localAddress, promise){
						tail.bind(localAddress, promise){ -> tail(DefaultChannelHandlerContext)
							final AbstractChannelHandlerContext next = this.findContextOutbound();//查找下一个HandlerContext
							EventExecutor executor = next.executor();
							if(next.isHandlerAddedCalled() && executor.inEventLoop()) {
								next.invokeBind(localAddress, promise);
							} else {
								safeExecute(executor, new OneTimeTask() {
									public void run() {
										next.invokeBind(localAddress, promise);
									}
								}, promise, (Object)null);
							}
						}
					}
				}
			} else {
				promise.setFailure(regFuture.cause());
			}   
        });
}
invokeBind(localAddress, promise){
	((ChannelOutboundHandler)this.handler()).bind(this, localAddress, promise); -> HeadHandler的bind
}
ServerBootstrapAcceptor extends ChannelInboundHandlerAdapter{
	channelRead(ChannelHandlerContext ctx, Object msg){
		final Channel child = (Channel) msg;
		child.pipeline().addLast(childHandler);
		childGroup.register(child).addListener(new ChannelFutureListener() {
				public void operationComplete(ChannelFuture future) throws Exception {
					!future.isSuccess() -> forceClose(child, future.cause());{
												child.unsafe().closeForcibly();
											}
				}
			});
	}
}
SingleThreadEventExecutor{
	thread = threadFactory.newThread(() -> {
		SingleThreadEventExecutor.this.run();{
			processSelectedKey(SelectionKey k, AbstractNioChannel ch){
				if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {
					unsafe.read(); -> pipeline.fireChannelRead(readBuf); pipeline.fireChannelReadComplete();等等, 这里会创建NioSocketChannel(OP_READ)
				}
				if ((readyOps & SelectionKey.OP_WRITE) != 0) {
					// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write
					ch.unsafe().forceFlush();
				}
				if ((readyOps & SelectionKey.OP_CONNECT) != 0) {
					unsafe.finishConnect();
				}
			}
		}
	});
	
	public void execute(Runnable task) {
		if (inEventLoop) {
            addTask(task);{
				if (isShutdown()) {
					reject();
				}
				taskQueue.add(task);
			}
        } else {
            startThread();
            addTask(task);
            if (isShutdown() && removeTask(task)) {
                reject();
            }
        }
		if (!addTaskWakesUp && wakesUpForTask(task)) {
            wakeup(inEventLoop); -> selector.wakeup()
        }
	}
}