org.apache.curator:
NodeCache(先判断是否exist,在调用getData)
org.apache.curator.framework.recipes.cache.NodeCache.start
org.apache.curator.framework.recipes.cache.NodeCache.reset
org.apache.curator.framework.imps.ExistsBuilderImpl.forPath
org.apache.curator.framework.imps.CuratorFrameworkImpl.processBackgroundOperation
org.apache.curator.framework.imps.ExistsBuilderImpl.performBackgroundOperation
org.apache.zookeeper.ZooKeeper.exists

org.apache.curator.framework.recipes.cache.NodeCache.processBackgroundResult
org.apache.curator.framework.imps.GetDataBuilderImpl.forPath

PathChildrenCache

TreeCache(NodeCache + PathChildrenCache)

CuratorFramework start:
org.apache.curator.framework.imps.CuratorFrameworkImpl.start
org.apache.curator.CuratorZookeeperClient.start
org.apache.curator.ConnectionState.start
org.apache.curator.ConnectionState.reset
org.apache.curator.HandleHolder.closeAndReset
org.apache.curator.HandleHolder.getZooKeeper

org.apache.zookeeper:
watcher triggered:(watcher注册只是往server设置node上watch的boolean值)(单线程)
org.apache.zookeeper.ClientCnxn.EventThread.processEvent
send packet:(单线程,单连接)
org.apache.zookeeper.ClientCnxn.SendThread.sendPacket
应用层多线程写入outgoingQueue，SendThread取出outgoingQueue后写入到pendingQueue和发送到server(server按接收顺序处理请求)，SendThread接收到响应取出pendingQueue并返回给应用层
callback:
客户端命令调用完毕后的回调
client入口: org.apache.zookeeper.ZooKeeper server入口: org.apache.zookeeper.server.quorum.QuorumPeerMain

session timeout -> con lost

Paxos到Zookeeper: 2 4 6 7
4. zab协议和paxos协议
6. zookeeper的应用场景
7. zookeeper技术内幕
-- 会话创建,管理,清理
-- 选举算法细节
-- 请求处理

连接:
zookeeper: 长连接 集群里的单机
dia: http 随机长轮询 集群里的单机
config: 长连接 集群里的单机