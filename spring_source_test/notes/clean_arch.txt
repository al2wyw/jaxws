组件聚合
复用/发布等同原则 REP
软件复用的最小颗粒度等同于其发布的最小颗粒度
共同闭包原则 CCP
相同职责的类放在同一个组件，即组件只存在一个变更的原因 (强调相同职责的类的聚集，减少组件数量)
共同复用原则 CRP
不要强迫组件依赖方依赖不需要的类(强调组件的拆分，避免过多不必要的发布)
REP && CCP : 太多不必要的发布；  REP && CRP: 太多的组件变更； 组件聚合原则实质就是可复用性和可维护性之间的取舍
REP ---- CCP
   \    /
     CRP

组件耦合
无依赖环原则 ADP
依赖环的危害: 无法判断环上的其他组件是否需要更新；部署测试开发成本上升，需要额外引入组件
打破依赖环: 1. DIP依赖反转 2. 把互相依赖的类抽离成立新的组件
组件结构图不是用来描述应用功能的，不具备和应用功能分组互相对应的能力，而是应用在构建性和维护性方面的图，
组件结构图随着系统的变化而变化，不是在系统设计之初就能设计出来

稳定依赖原则 SDP
依赖关系必须朝着更稳定的方向，即难以修改的组件不应该依赖于经常变更的组件；稳定性：依赖的出度/(依赖的入度+出度)
系统并不是需要所有组件都处于高稳定性状态，设计组件架构图是为了决定哪些组件稳定，哪些组件不稳定

稳定抽象原则 SAP
抽象化程度和稳定性保持一致；抽象度: 接口和抽象类数量/所有类数量
系统中总有一部分不应该经常变更，代表了系统的高阶架构设计及业务策略相关的高阶决策，这部分应该放到稳定组件中，同时使用抽象类和接口，使其具备扩展性
而不稳定的组件应该包含具体的实现(抽象化低)，使其容易被修改
稳定抽象主序列图: 痛苦区(0,0): 稳定性高抽象化低；无用区(1,1): 稳定性低抽象化高；组件的稳定抽象要靠近主序列线(0,1到1,0的直线)

什么是软件架构
划分组件的边界和组件的依赖关系，设计系统顶层结构(骨架)，制定相应的开发测试部署运维规范
软件架构师必须是一线程序员
保持可选项
软件有行为价值和架构价值，要保证架构价值的方法是尽可能长时间保留尽可能多的可选项，
系统一般可以降解为高阶策略(业务规则与操作过程)和底层细节(技术实现，即可选项)，系统以策略为最基本元素，让细节与策略脱离，并延迟细节的决策

独立性(架构的独立性带来开发，部署的独立性，组件之间的解耦)
按层解耦：系统可以被解耦成若干个水平分层 -- UI界面，应用独有的业务逻辑，领域普适的业务逻辑，数据存储等
按用例解耦: 用例是系统水平分层的一个个垂直切片，每个用例都有自己独立的UI，应用逻辑，业务逻辑和数据存储等
不要害怕垂直切分带来的代码"重复"，两段代码表面上看是重复的，但是走不同的演进路径，有着不同的变更频率和原因，因此不算是真正的重复
解耦模式
源码层次(通过一个执行文件加载到内存) -> 部署(类库)层次(通过库文件函数调用交互) -> 服务层次(通过网络调用交互);
系统的解耦推行到一旦需要就可以随时转变为服务的程度即可，即良好的架构容许系统从单体结构开始，然后逐步成长为一组可部署的独立单元，甚至是独立的服务


