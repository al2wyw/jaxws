TxAdviceBeanDefinitionParser to parse <tx:advice> -> NameMatchTransactionAttributeSource  ->  DefaultBeanFactoryPointcutAdvisor
TransactionAttributeSource  subclass AnnotationTransactionAttributeSource has one or more TransactionAnnotationParser subclass
SpringTransactionAnnotationParser to parse @Transactional  ->  BeanFactoryTransactionAttributeSourceAdvisor(internalTransactionAdvisor)

AbstractPlatformTransactionManager has  int transactionSynchronization
 
DataSourceTransactionManager.DataSourceTransactionObject hold the connectionholder, savePointAllow(b), newConnectionHolder(b), mustRestoreAutoCommit(b)

TransactionSynchronizationManager(thread oriented,用于tx和orm框架交互):
 resources map key DataSource/SqlSessionFactory value ConnectionHolder/SqlSessionHolder; 
 synchronizations set key TransactionSynchronization(ConnectionSynchronization(JDBC)/SqlSessionSynchronization(myBatis));(bind to/unbind from thread)
initSynchronization() -> isSynchronizationActive() true
setActualTransactionActive(true) -> isActualTransactionActive() true

ConnectionHolder has ConnectionHandle to handle all the method call of ConnectionHolder

Transaction(DataSourceTransactionObject,包含connection) and TransactionSynchronization(用于tx流程扩展,数据清理) two main things go along with the transactional

two places to create ConnectionHolder, one is to register ConnectionSynchronization(no transaction), another is not(has transaction).

isNestedTransactionAllowed -> SavepointAllowed

support current tx:
PROPAGATION_SUPPORTS	if no -> do nothing
PROPAGATION_MANDATORY 	if no -> exception
PROPAGATION_REQUIRED	if no -> new

not support current tx:
PROPAGATION_NOT_SUPPORTED 	if has -> suspend
PROPAGATION_NEVER			if has -> exception

create new tx:
PROPAGATION_REQUIRES_NEW 	if has -> suspend
PROPAGATION_NESTED			if has -> save point

main classes:
DataSource(获取数据库连接), ORM框架需要它, DataSourceTransactionManager也需要它, spring tx需要ORM配合才能完成
TransactionInterceptor implements MethodInterceptor
RuleBasedTransactionAttribute implements TransactionAttribute, TransactionDefinition
SpringTransactionAnnotationParser implements TransactionAttributeSource
implements TransactionSynchronization
DataSourceTransactionManager implements PlatformTransactionManager
ConnectionHolder implements ResourceHolder
TransactionSynchronizationManager
TransactionInfo{
		private final PlatformTransactionManager transactionManager;
		private final TransactionAttribute transactionAttribute;
		private final String joinpointIdentification;
		private TransactionStatus transactionStatus;//has SuspendedResourcesHolder(connection)
		private TransactionInfo oldTransactionInfo;
}

interface TransactionSynchronization { //please notice every method has its own condition at the beginning
	//the sequence of calling the four methods as following:
	void beforeCommit(boolean)
	void beforeCompletion()
	void afterCommit()
	void afterCompletion(int)
	
	void flush()
	
	void resume()
	void suspend()
}

MyBatis ORM:
MapperProxy(jdk InvocationHandler) invoke -> MapperMethod execute -> SqlSessionTemplate insert/delete/update/select -> SqlSessionInterceptor(jdk InvocationHandler) invoke
{
	SqlSession sqlSession = SqlSessionUtils.getSqlSession(SqlSessionTemplate.this.sqlSessionFactory, SqlSessionTemplate.this.executorType, SqlSessionTemplate.this.exceptionTranslator);
	try{
		//method is selectList
		Object result = method.invoke(sqlSession, args);{
			//DefaultSqlSession.selectList -> BaseExecutor.queryFromDatabase -> SimpleExecutor.doQuery -> SimpleExecutor.prepareStatement -> BaseExecutor.getConnection -> SpringManagedTransaction.getConnection -> DataSourceUtils.doGetConnection
			//Transaction has JdbcTransaction, ManagedTransaction and SpringManagedTransaction(integrate with spring)
			...
			DataSourceUtils.doGetConnection(DataSource dataSource){
				ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);
				if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {
					conHolder.requested();
					if (!conHolder.hasConnection()) {
						conHolder.setConnection(dataSource.getConnection());
					}
					return conHolder.getConnection();
				}
				// Else we either got no holder or an empty thread-bound holder here.
				Connection con = dataSource.getConnection();

				if (TransactionSynchronizationManager.isSynchronizationActive()) {
					// Use same Connection for further JDBC actions within the transaction.
					// Thread-bound object will get removed by synchronization at transaction completion.
					ConnectionHolder holderToUse = conHolder;
					if (holderToUse == null) 
						holderToUse = new ConnectionHolder(con);
					else 
						holderToUse.setConnection(con);
					holderToUse.requested();
					TransactionSynchronizationManager.registerSynchronization(
							new ConnectionSynchronization(holderToUse, dataSource));
					holderToUse.setSynchronizedWithTransaction(true);
					if (holderToUse != conHolder) {
						TransactionSynchronizationManager.bindResource(dataSource, holderToUse);
					}
				}
				return con;
			}
			...
		}
		//SqlSessionHolder holder = (SqlSessionHolder)TransactionSynchronizationManager.getResource(sessionFactory);
		//holder != null && holder.getSqlSession() == sqlSession
        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {
          sqlSession.commit(true);
        }
        return result;
	} finally {
        if (sqlSession != null) {
          SqlSessionUtils.closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);
        }
    }
}
SqlSessionUtils.getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator){
	SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);
	if (holder != null && holder.isSynchronizedWithTransaction()) {
	  if (holder.getExecutorType() != executorType) {
		throw new TransientDataAccessResourceException();
	  }
	  holder.requested();
	  return holder.getSqlSession();
	}
	//DefaultSqlSession
	SqlSession session = sessionFactory.openSession(executorType);
	if (TransactionSynchronizationManager.isSynchronizationActive()) {//always active even no transaction
	  Environment environment = sessionFactory.getConfiguration().getEnvironment();
	  if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) {
		holder = new SqlSessionHolder(session, executorType, exceptionTranslator);
		TransactionSynchronizationManager.bindResource(sessionFactory, holder);
		TransactionSynchronizationManager.registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));
		holder.setSynchronizedWithTransaction(true);//everytime when resourceholder created it will set to true
		holder.requested();
	  }
	}
	return session;
}
SqlSessionUtils.closeSqlSession(SqlSession session, SqlSessionFactory sessionFactory){
	SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);
	if ((holder != null) && (holder.getSqlSession() == session)) {
	  holder.released();
	} else {
	  session.close();
	}
}

Spring TX:
TransactionInterceptor.invoke(final MethodInvocation invocation){
	Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);
	return invokeWithinTransaction(invocation.getMethod(), targetClass, new InvocationCallback() {
			@Override
			public Object proceedWithInvocation() throws Throwable {
				return invocation.proceed();
			}
	});
}

invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation){
	//find the @Transactional
	final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass);{
		//AbstractFallbackTransactionAttributeSource
		deal with cache first and then
		TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass);{
			if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {
				return null;
			}
			Class<?> userClass = ClassUtils.getUserClass(targetClass);//if CGLIB get the superclass
			//the method may be {@code IFoo.bar()} and the target class may be {@code DefaultFoo}. In this case, the most specific method may be {@code DefaultFoo.bar()}
			Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass);//In contrast to AopUtils.getMostSpecificMethod, this method does not resolve bridge methods automatically.
			specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);
			
			TransactionAttribute txAtt = findTransactionAttribute(specificMethod);{
				return determineTransactionAttribute(specificMethod);{
					for (TransactionAnnotationParser annotationParser : this.annotationParsers) {
						TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae);{
							//SpringTransactionAnnotationParser
							AnnotationAttributes ann = AnnotatedElementUtils.getAnnotationAttributes(ae, Transactional.class.getName());//collect annotation values including those declared on annotation and default values
							if (ann != null) {
								return parseTransactionAnnotation(ann);{
									RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();
									setup rbta from AnnotationAttributes
									return rbta
								}
							}
						}
						if (attr != null) {
							return attr;
						}
					}
				}
			}
			if (txAtt != null) {
				return txAtt;//will not go to DeclaringClass
			}
			txAtt = findTransactionAttribute(specificMethod.getDeclaringClass());
			if (txAtt != null) {
				return txAtt;
			}
			if (specificMethod != method) {
				// Fallback is to look at the original method.
				txAtt = findTransactionAttribute(method);
				if (txAtt != null) {
					return txAtt;
				}
				// Last fallback is the class of the original method.
				return findTransactionAttribute(method.getDeclaringClass());
			}
		}
	}
	final PlatformTransactionManager tm = determineTransactionManager(txAttr);{
		String qualifier = txAttr.getQualifier();
		if (StringUtils.hasLength(qualifier)) {
			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier);
		}
		else if (this.transactionManagerBeanName != null) {//transactionManagerBeanName = transactionManager by default
			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class);
		}
		else {
			return this.beanFactory.getBean(PlatformTransactionManager.class);
		}
	}
	final String joinpointIdentification = methodIdentification(method, targetClass);//return a String of this Method
	
	//all the things are prepared, start the transaction process !!!
	if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {
		TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);
		try {
			retVal = invocation.proceedWithInvocation();
		}
		catch (Throwable ex) {
			completeTransactionAfterThrowing(txInfo, ex);
			throw ex;
		}
		finally {
			cleanupTransactionInfo(txInfo);//set old txInfo of current thread back to current thread
		}
		commitTransactionAfterReturning(txInfo);{
			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());
		}
		return retVal;
	}else{
		// It's a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.
	}
}

createTransactionIfNecessary(PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification){
	If no name specified, apply method identification as transaction name.
	TransactionStatus status = tm.getTransaction(txAttr);{
		Object transaction = doGetTransaction();{
			DataSourceTransactionObject txObject = new DataSourceTransactionObject();
			txObject.setSavepointAllowed(isNestedTransactionAllowed());
			//get the resourceHolder from the TransactionSynchronizationManager but first time there are no holders
			//if the resourceHolder isVoid, it will be removed from resource map
			ConnectionHolder conHolder =
				(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
			txObject.setConnectionHolder(conHolder, false);
			return txObject;
		}
		if (definition == null) {
			definition = new DefaultTransactionDefinition();
		}
		//txObject.getConnectionHolder() != null && txObject.getConnectionHolder().isTransactionActive()
		if (isExistingTransaction(transaction)) {
			// Existing transaction found -> check propagation behavior to find out how to behave.
			return handleExistingTransaction(definition, transaction, debugEnabled);
		}
		if (definition.getTimeout() < TransactionDefinition.TIMEOUT_DEFAULT) {
			throw InvalidTimeoutException
		}
		if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) {
			throw IllegalTransactionStateException
		}
		else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||
				definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||
			definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {
			SuspendedResourcesHolder suspendedResources = suspend(null);
			try {
				boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
				DefaultTransactionStatus status = newTransactionStatus(
						definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);
				doBegin(transaction, definition);
				prepareSynchronization(status, definition);
				return status;
			}catch (RuntimeException ex) {
				resume(null, suspendedResources);
				throw ex;
			}catch (Error err) {
				resume(null, suspendedResources);
				throw err;
			}
		}else {
			// Create "empty" transaction: no actual transaction, but potentially synchronization.
			boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);
			//transaction and suspendedResources are null
			return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);{
				DefaultTransactionStatus status = newTransactionStatus(...){
					boolean actualNewSynchronization = newSynchronization &&
						!TransactionSynchronizationManager.isSynchronizationActive();
					return new DefaultTransactionStatus(
						transaction, newTransaction, actualNewSynchronization,
						definition.isReadOnly(), debug, suspendedResources);
				}
				prepareSynchronization(status, definition);{
					if (status.isNewSynchronization()) {
						TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());
						TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(
								(definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) ?
										definition.getIsolationLevel() : null);
						TransactionSynchronizationManager.setCurrentTransactionReadOnly(definition.isReadOnly());
						TransactionSynchronizationManager.setCurrentTransactionName(definition.getName());
						//synchronizations.set(new LinkedHashSet<TransactionSynchronization>());
						TransactionSynchronizationManager.initSynchronization();
					}
				}
			}
		}
	}
	return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);{
		//TransactionInfo will wrap old TransactionInfo
		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification);
		txInfo.newTransactionStatus(status);//set the status
		txInfo.bindToThread();//set txInfo to current thread, put old txInfo of current thread into this txInfo
	}
}

handleExistingTransaction(definition, transaction, debugEnabled){
	处理其他PROPAGATION
	
	if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {
		if (!isNestedTransactionAllowed()) 
			throw new NestedTransactionNotSupportedException
		if (useSavepointForNestedTransaction()) {
			// Create savepoint within existing Spring-managed transaction,
			// through the SavepointManager API implemented by TransactionStatus.
			// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.
			DefaultTransactionStatus status =
					prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);
			status.createAndHoldSavepoint();
			return status;
		}
		else {
			// Nested transaction through nested begin and commit/rollback calls.
			// Usually only for JTA: Spring synchronization might get activated here
			// in case of a pre-existing JTA transaction.
			boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
			DefaultTransactionStatus status = newTransactionStatus(
					definition, transaction, true, newSynchronization, debugEnabled, null);
			doBegin(transaction, definition);
			prepareSynchronization(status, definition);
			return status;
		}
	}
	
	boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
	return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);
}

suspend(Object transaction){
	if (TransactionSynchronizationManager.isSynchronizationActive()) {
		List<TransactionSynchronization> suspendedSynchronizations = doSuspendSynchronization();{
			suspendedSynchronizations =
				TransactionSynchronizationManager.getSynchronizations();
			for (TransactionSynchronization synchronization : suspendedSynchronizations) {
				//TransactionSynchronizationManager.unbindResource
				synchronization.suspend();
			}
			TransactionSynchronizationManager.clearSynchronization();
			return suspendedSynchronizations;
		}
		try {
			Object suspendedResources = null;
			if (transaction != null) {
				suspendedResources = doSuspend(transaction);{
					txObject.setConnectionHolder(null);
					ConnectionHolder conHolder = (ConnectionHolder)
							TransactionSynchronizationManager.unbindResource(this.dataSource);
					return conHolder;
				}
			}
			String name = TransactionSynchronizationManager.getCurrentTransactionName();
			TransactionSynchronizationManager.setCurrentTransactionName(null);
			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();
			TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);
			Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();
			TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(null);
			boolean wasActive = TransactionSynchronizationManager.isActualTransactionActive();
			TransactionSynchronizationManager.setActualTransactionActive(false);
			return new SuspendedResourcesHolder(
					suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);
		}
		catch (RuntimeException ex) {
			// doSuspend failed - original transaction is still active...
			doResumeSynchronization(suspendedSynchronizations);{
				for (TransactionSynchronization synchronization : suspendedSynchronizations) {
					//TransactionSynchronizationManager.bindResource
					synchronization.resume();
					TransactionSynchronizationManager.registerSynchronization(synchronization);
				}
			}
			throw ex;
		}
		catch (Error err) {
			// doSuspend failed - original transaction is still active...
			doResumeSynchronization(suspendedSynchronizations);
			throw err;
		}
	}else if (transaction != null) {
		// Transaction active but no synchronization active.
		Object suspendedResources = doSuspend(transaction);
		return new SuspendedResourcesHolder(suspendedResources);
	}else {
		// Neither transaction nor synchronization active.
		return null;
	}
}
doBegin(transaction, definition){
	try {
		if (txObject.getConnectionHolder() == null ||
				txObject.getConnectionHolder().isSynchronizedWithTransaction()) {
			Connection newCon = this.dataSource.getConnection();
			txObject.setConnectionHolder(new ConnectionHolder(newCon), true);
		}
		txObject.getConnectionHolder().setSynchronizedWithTransaction(true);
		con = txObject.getConnectionHolder().getConnection();
		Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);{
			setup con to readOnly and isolationLevel of definition
			return the current isolationLevel of con
		}	
		txObject.setPreviousIsolationLevel(previousIsolationLevel);

		// Switch to manual commit if necessary. This is very expensive in some JDBC drivers,
		// so we don't want to do it unnecessarily (for example if we've explicitly
		// configured the connection pool to set it already).
		if (con.getAutoCommit()) {
			txObject.setMustRestoreAutoCommit(true);
			con.setAutoCommit(false);
		}
		txObject.getConnectionHolder().setTransactionActive(true);
		//return default timeout or custom timeout
		int timeout = determineTimeout(definition);
		if custom timeout
			txObject.getConnectionHolder().setTimeoutInSeconds(timeout);
		
		// Bind the session holder to the thread.
		if (txObject.isNewConnectionHolder()) {
			TransactionSynchronizationManager.bindResource(getDataSource(), txObject.getConnectionHolder());
		}
	}catch (Throwable ex) {
		DataSourceUtils.releaseConnection(con, this.dataSource);{
			release the reference count, will the con be close ???
			the transactional will not directly close it then handled by ConnectionHolder,ConnectionHandle(SimpleConnectionHandle do nothing with con) close con and set con of connectionHolder to null;
			the none transactional will directly close it;
		}
		throw new CannotCreateTransactionException;
	}
}
resume(null, suspendedResources){
	if (resourcesHolder != null) {
		Object suspendedResources = resourcesHolder.suspendedResources;
		if (suspendedResources != null) {
			doResume(transaction, suspendedResources);{
				ConnectionHolder conHolder = (ConnectionHolder) suspendedResources;
				TransactionSynchronizationManager.bindResource(this.dataSource, conHolder);
			}
		}
		List<TransactionSynchronization> suspendedSynchronizations = resourcesHolder.suspendedSynchronizations;
		if (suspendedSynchronizations != null) {
			TransactionSynchronizationManager.setActualTransactionActive(resourcesHolder.wasActive);
			TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(resourcesHolder.isolationLevel);
			TransactionSynchronizationManager.setCurrentTransactionReadOnly(resourcesHolder.readOnly);
			TransactionSynchronizationManager.setCurrentTransactionName(resourcesHolder.name);
			doResumeSynchronization(suspendedSynchronizations);{
				//synchronizations.set(new LinkedHashSet<TransactionSynchronization>());
				TransactionSynchronizationManager.initSynchronization();
				for (TransactionSynchronization synchronization : suspendedSynchronizations) {
					//TransactionSynchronizationManager.bindResource
					synchronization.resume();
					TransactionSynchronizationManager.registerSynchronization(synchronization);
				}
			}
		}
	}
}

completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex){
	if (txInfo.transactionAttribute.rollbackOn(ex)) {
		try {
			txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());{
				DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;
				processRollback(defStatus);{
					try {
						try {
							triggerBeforeCompletion(status);{
								if (status.isNewSynchronization()) {
									//beforeCompletion has a flag set to false to avoid calling the same method in afterCompletion
									//call beforeCompletion of all the synchronization
									//SqlSessionSynchronization -> unbindResource and cloes sqlSession
									//ConnectionSynchronization -> unbindResource and releaseConnection
									TransactionSynchronizationUtils.triggerBeforeCompletion();
								}
							}
							if (status.hasSavepoint()) {
								//get con to call rollback(savepoint)
								status.rollbackToHeldSavepoint();
							}
							else if (status.isNewTransaction()) {
								//get con to call rollback()
								doRollback(status);
							}
							else if (status.hasTransaction()) {
								//rollbackOnly or globally mark an existing transaction as rollback-only
								if (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) {
									//this.rollbackOnly = true;
									doSetRollbackOnly(status);
								}
							}
						}
						catch (RuntimeException ex) {
							triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);
							throw ex;
						}
						catch (Error err) {
							triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);
							throw err;
						}
						triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);{
							if (status.isNewSynchronization()) {
								List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations();
								if (!status.hasTransaction() || status.isNewTransaction()) {
									// No transaction or new transaction for the current scope
									//call afterCompletion of all the synchronization
									//SqlSessionSynchronization -> unbindResourceIfPossible and get sqlSession to call close and reset holder
									//ConnectionSynchronization -> unbindResourceIfPossible and releaseConnection and set the con of holder to null and reset holder
									invokeAfterCompletion(synchronizations, completionStatus);
								}
								else if (!synchronizations.isEmpty()) {
									// Existing transaction that we participate in, controlled outside
									// of the scope of this Spring transaction manager -> try to register
									// an afterCompletion callback with the existing (JTA) transaction.
									registerAfterCompletionWithExistingTransaction(status.getTransaction(), synchronizations);
								}
							}
						}
					}
					finally {
						cleanupAfterCompletion(status);{
							status.setCompleted();
							if (status.isNewSynchronization()) {
								TransactionSynchronizationManager.clear();
							}
							if (status.isNewTransaction()) {
								doCleanupAfterCompletion(status.getTransaction());{
									DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;
									if (txObject.isNewConnectionHolder()) {
										TransactionSynchronizationManager.unbindResource(this.dataSource);
									}
									if (txObject.isMustRestoreAutoCommit()) {
										con.setAutoCommit(true);
									}
									//Reset transaction isolation and readOnly
									DataSourceUtils.resetConnectionAfterTransaction(con, txObject.getPreviousIsolationLevel());
									if (txObject.isNewConnectionHolder()) {
										DataSourceUtils.releaseConnection(con, this.dataSource);
									}

									txObject.getConnectionHolder().clear();
								}
							}
							if (status.getSuspendedResources() != null) {
								resume(status.getTransaction(), (SuspendedResourcesHolder) status.getSuspendedResources());
							}
						}
					}
				}
			}
		}
		...
	}else{
		try {
			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());{
				if (defStatus.isLocalRollbackOnly()) {
					processRollback(defStatus);
					return;
				}
				//global transation stuff
				if (!shouldCommitOnGlobalRollbackOnly() && defStatus.isGlobalRollbackOnly()) {
					processRollback(defStatus);
					// Throw UnexpectedRollbackException only at outermost transaction boundary
					// or if explicitly asked to.
					if (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) {
						throw new UnexpectedRollbackException;
					}
					return;
				}

				processCommit(defStatus);{
					try {
						boolean beforeCompletionInvoked = false;
						try {
							//do nothing 
							prepareForCommit(status);
							//call beforeCommit of all the synchronization
							//SqlSessionSynchronization -> get sqlSession to call commit()
							//ConnectionSynchronization -> do nothing
							triggerBeforeCommit(status);
							triggerBeforeCompletion(status);
							beforeCompletionInvoked = true;
							boolean globalRollbackOnly = false;
							if (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) {
								globalRollbackOnly = status.isGlobalRollbackOnly();
							}
							if (status.hasSavepoint()) {
								status.releaseHeldSavepoint();
							}
							else if (status.isNewTransaction()) {
								//con.commit();
								doCommit(status);
							}
							// Throw UnexpectedRollbackException if we have a global rollback-only
							// marker but still didn't get a corresponding exception from commit.
							if (globalRollbackOnly) {
								throw new UnexpectedRollbackException;
							}
						}
						catch (UnexpectedRollbackException ex) {
							// can only be caused by doCommit
							triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);
							throw ex;
						}
						catch (TransactionException ex) {
							// can only be caused by doCommit
							if (isRollbackOnCommitFailure()) {
								//similar to processRollback
								doRollbackOnCommitException(status, ex);
							}
							else {
								triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);
							}
							throw ex;
						}
						catch (RuntimeException ex) {
							if (!beforeCompletionInvoked) {
								triggerBeforeCompletion(status);
							}
							doRollbackOnCommitException(status, ex);
							throw ex;
						}
						catch (Error err) {
							if (!beforeCompletionInvoked) {
								triggerBeforeCompletion(status);
							}
							doRollbackOnCommitException(status, err);
							throw err;
						}

						// Trigger afterCommit callbacks, with an exception thrown there
						// propagated to callers but the transaction still considered as committed.
						try {
							//call afterCommit of all the synchronization
							//SqlSessionSynchronization -> do nothing
							//ConnectionSynchronization -> do nothing
							triggerAfterCommit(status);
						}
						finally {
							triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);
						}
					}
					finally {
						cleanupAfterCompletion(status);
					}
				}
			}
		}
		...
	}
}

RuleBasedTransactionAttribute.rollbackOn(Throwable ex){
	RollbackRuleAttribute winner = null;
	int deepest = Integer.MAX_VALUE;

	if (this.rollbackRules != null) {
		for (RollbackRuleAttribute rule : this.rollbackRules) {
			int depth = rule.getDepth(ex);
			if (depth >= 0 && depth < deepest) {
				deepest = depth;
				winner = rule;
			}
		}
	}
	
	if (winner == null) {
		return super.rollbackOn(ex);//return (ex instanceof RuntimeException || ex instanceof Error);
	}
}

ConnectionHolder.setConnection(Connection connection) {
	if (this.currentConnection != null) {
		this.connectionHandle.releaseConnection(this.currentConnection);
		this.currentConnection = null;
	}
	if (connection != null) {
		this.connectionHandle = new SimpleConnectionHandle(connection);//SimpleConnectionHandle
	}
	else {
		this.connectionHandle = null;
	}
}

DataSourceUtils.releaseConnection(Connection con, DataSource dataSource){
	if (con == null) {
		return;
	}
	if (dataSource != null) {
		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);
		// JDBC Connection is transactional, that is, bound to the current thread by Spring's transaction facilities.
		// It's the transactional Connection: Don't close it.
		if (conHolder != null && connectionEquals(conHolder, con)) {
			conHolder.released();{
				super.released();//referenceCount--;
				if (!isOpen() && this.currentConnection != null) {
					this.connectionHandle.releaseConnection(this.currentConnection);{
						//SimpleConnectionHandle do nothing
					}
					this.currentConnection = null;
				}
			}
			return;
		}
	}
	doCloseConnection(con, dataSource);{
		//not the SmartDataSource or SmartDataSource should be closed
		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {
			//dbcp:PoolingDataSource$PoolGuardConnectionWrapper.close() -> PoolableConnection.close() Returns me to my pool
			con.close(); 
		}
	}
}