XML File:
<?xml version="1.0"?>
<!DOCTYPE note SYSTEM
"http://www.w3schools.com/dtd/note.dtd">(DTD)
<note
xmlns="http://www.w3schools.com"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.w3schools.com note.xsd">(xsd)
  <to>Tove</to>
  <from>Jani</from>
</note>

XMLSchema File:
<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="http://www.w3schools.com"
xmlns="http://www.w3schools.com"
elementFormDefault="qualified">

Simple type:
		element (with text only) :
			<xs:element name="xxx" type="yyy"/>  
			
			Default and Fixed Values for simple element:
				<xs:element name="xxx" type="yyy" default="xxx"/fix="xxx" /> 
			
		attribute (all attributes are simple) :
			<xs:attribute name="lang" type="xs:string"/> 
			
			Default and Fixed Values for Attributes:
				<xs:attribute name="lang" type="xs:string" default="xxx"/fix="xxx"/> 
			
			Optional and Required Attributes:
				<xs:attribute name="lang" type="xs:string" use="required"/> 
				
	restriction on simple type:
			enumeration 	Defines a list of acceptable values
			fractionDigits 	Specifies the maximum number of decimal places allowed. Must be equal to or greater than zero
			length 	Specifies the exact number of characters or list items allowed. Must be equal to or greater than zero
			maxExclusive 	Specifies the upper bounds for numeric values (the value must be less than this value)
			maxInclusive 	Specifies the upper bounds for numeric values (the value must be less than or equal to this value)
			maxLength 	Specifies the maximum number of characters or list items allowed. Must be equal to or greater than zero
			minExclusive 	Specifies the lower bounds for numeric values (the value must be greater than this value)
			minInclusive 	Specifies the lower bounds for numeric values (the value must be greater than or equal to this value)
			minLength 	Specifies the minimum number of characters or list items allowed. Must be equal to or greater than zero
			pattern 	Defines the exact sequence of characters that are acceptable
			totalDigits 	Specifies the exact number of digits allowed. Must be greater than zero
			whiteSpace 	Specifies how white space (line feeds, tabs, spaces, and carriage returns) is handled
			
			<xs:element name="password">
			  <xs:simpleType>
				<xs:restriction base="xs:string">
				  <xs:minLength value="5"/>
				  <xs:maxLength value="8"/>
				</xs:restriction>
			  </xs:simpleType>
			</xs:element> 
			
			<xs:element name="car">
			  <xs:simpleType>
				<xs:restriction base="xs:string">
				  <xs:enumeration value="Audi"/>
				  <xs:enumeration value="Golf"/>
				  <xs:enumeration value="BMW"/>
				</xs:restriction>
			  </xs:simpleType>
			</xs:element> 
			
			<xs:element name="letter">
			  <xs:simpleType>
				<xs:restriction base="xs:string">
				  <xs:pattern value="([a-z][A-Z])+"/>
				</xs:restriction>
			  </xs:simpleType>
			</xs:element> 
	
	built-in data types:
			xs:string
			xs:decimal
			xs:integer
			xs:boolean
			xs:date
			xs:time

Complex type:	
    1.empty elements (only attribute)
    2.elements that contain only other elements
    3.elements that contain only attribute+text
    4.elements that contain both other elements and attribute
	
	1.	<xs:element name="product">
		  <xs:complexType>
			<xs:attribute name="prodid" type="xs:positiveInteger"/>
		  </xs:complexType>
		</xs:element> 
		(there is another way which is complex!!!)

	2. <xs:element name="person">
		  <xs:complexType>
			<xs:sequence>
			  <xs:element name="firstname" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			  <xs:element name="lastname" type="xs:string"/>
			</xs:sequence>
		  </xs:complexType>
		</xs:element
	
	3.	<shoesize country="france">35</shoesize> 
		<xs:element name="shoesize">
		  <xs:complexType>
			<xs:simpleContent> (the other are all complex content???)
			  <xs:extension base="xs:integer"> (restriction is ok)
				<xs:attribute name="country" type="xs:string" />
			  </xs:extension>
			</xs:simpleContent>
		  </xs:complexType>
		</xs:element> 
		
	4. <xs:element name="guitar">
		<xs:complexType>
		  <xs:sequence>
			<xs:element ref="builder"/>
			<xs:element ref="model"/>
		  </xs:sequence>
		  <xs:attribute name="id" type="xs:string" use="required"/>
		</xs:complexType>
	  </xs:element>
	
	complex content always used in type extension:
		<xs:element name="employee" type="fullpersoninfo"/>
		<xs:complexType name="personinfo">
		  <xs:sequence>
			<xs:element name="firstname" type="xs:string"/>
		  </xs:sequence>
		</xs:complexType>
		<xs:complexType name="fullpersoninfo">
		  <xs:complexContent>
			<xs:extension base="personinfo">
			  <xs:sequence>
				<xs:element name="address" type="xs:string"/>
			  </xs:sequence>
			</xs:extension>
		  </xs:complexContent>
		</xs:complexType> 
	
	seven indicators:
		Order indicators:
			All         specifies that the child elements can appear in any order
			Choice      specifies that either one child element or another can occur
			Sequence    specifies that the child elements must appear in a specific order

		Occurrence indicators:
			maxOccurs
			minOccurs

		Group indicators:
			Group name
			attributeGroup name
