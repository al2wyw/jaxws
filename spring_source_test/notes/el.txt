spel: token -> ast -> 解释执行(遍历ast树节点执行节点对应的java代码)/编译执行(遍历ast树节点通过ACM生成类，执行生成类的方法) 不支持多语句和代码块和控制语句等, 通过解释执行收集动态变量和动态脚本返回值的类型, 然后生成对应类型的字节码, 在执行字节码时如果传入的实参类型发生改变则会报错退回到解析执行(mix模式), 字节码的效率是解释执行的20倍+
aviator: token list(只是生成token列表，没有生成ast树，控制语句变成方法调用callcc/reducer, 所以生成的解释指令或者asm生成的字节码是分散的) -> 解释执行(token生成对应的指令，执行指令对应的java代码)/编译执行(token通过ACM生成类，执行生成类的方法)
mvel: token -> ast list -> 解释执行(遍历ast list执行节点对应的java代码, 每个ast节点对应一个statement或block(ast list))(ASMAccessorOptimizer/ReflectAccessorOptimizer属性取值优化,其他地方没有用到ASM)

ql expression：token -> ast -> 解释执行(遍历ast树节点生成对应的指令，执行指令对应的java代码)

fast el: token -> ast(antlr) -> 使用template生成java类源码 -> javac -> 执行生成类的方法
生成类执行速度快
不支持动态类型，编译期就需要决定变量的类型(这个是由java语言决定的，其他的表达式可以支持动态类型)

mvel:
MVEL.compileExpression 和 MVEL.eval 使用同样的ast解析逻辑(AbstractParser.nextToken)，eval包含解析和运行，为一次性解释运行，executeExpression可以多次运行，避免重复解析
MVEL.executeExpression 会使用DynamicOptimizer优化Accessor(默认使用反射优化，执行多次后使用asm优化)
Accessor主要分为 DynamicAccessor(优化accessor) AccessorNode(各种基础的取值设值) ExecutableStatement(包含一组ASTNode) 等
ASTNode + Accessor 组成整体的解释运行逻辑
ExpressionCompiler.compile to reduce literal
CompilerTools.finalizePayload to optimize astnodes list

优化技术:
spel: 解释执行无优化 编译执行动态脚本静态化(通过识别出SpelNodeImpl的exitTypeDescriptor)
aviator: 常量折叠
mvel: 常量折叠 动态脚本静态化(通过识别出ASTNode的egressType或者解析时打开StrongTyping开关)