RootBeanDefinition -> ConfigurationClassBeanDefinition(AnnotatedBeanDefinition)
GenericBeanDefinition -> ScannedGenericBeanDefinition(AnnotatedBeanDefinition)/AnnotatedGenericBeanDefinition(AnnotatedBeanDefinition)
ConfigurationClassBeanDefinition 来自@Configuration的Class中的bean method创建
ScannedGenericBeanDefinition 来自scan机制扫描创建(functionally equivalent to AnnotatedGenericBeanDefinition)
AnnotatedGenericBeanDefinition 是AnnotatedBeanDefinition的缺省实现，所有的被标注的类都可以创建 (@Import的class)
RootBeanDefinition: A root bean definition represents the merged bean definition,It might have been created from multiple original bean definitions that inherit from each other(worked with ChildBeanDefinition)
GenericBeanDefinition: registering user-visible bean definitions (which a post-processor might operate on, potentially even reconfiguring the parent name).

beanPostProcessors list is inside AbstractBeanFactory while beanFactoryPostProcessors list is inside AbstractApplicationContext
DefaultListableBeanFactory beanFactory is inside AbstractRefreshableApplicationContext

beanFactory.ignoreDependencyInterface(Class<?> ifc){//Ignore the given dependency interface for autowiring
	this.ignoredDependencyInterfaces.add(ifc);
}
beanFactory.registerResolvableDependency(Class<?> dependencyType, Object autowiredValue){//Register a special dependency type with autowired value
	this.resolvableDependencies.put(dependencyType, autowiredValue);
}

InstantiationStrategy(default ctor,ctor,factory method) -> SimpleInstantiationStrategy -> CglibSubclassingInstantiationStrategy

FactoryBean is used in BeanFactory(getObjectForBeanInstance) while ObjectFactory is a normal object generator(used in dependency injection), they are similar.

Bug ? Indexer will change Properties to Map and get value from a Map. see getValue of MapIndexingValueRef in Indexer.
However, Properties has a default Properties which created by Properties(Properties default), when Properties can not get 
the value, it will query from default Properties. Map will not do this!

PathMatchingResourcePatternResolver 搭配 DefaultResourceLoader 解析获取到所有的Resource

useful utils:
org.springframework.beans.BeanUtils, org.springframework.util.ClassUtils

CglibSubclassingInstantiationStrategy is used by method-overrides(方法注入,解决singleton依赖prototype注入,不需要依赖BF去getBean) to instatiate bean(@Lookup or lookup-method)

@Scope to create ScopeProxy to solve the prototype injection

getLazyResolutionProxyIfNecessary what does the xml do with this (just instantiate the bean later, and then let it pass through all the beanPostProcessors)

@Lazy with @Autowired will create lazyProxy, but the target should be tagged with @Lazy to instantiate later. @Lazy with aop getTarget (jdk/cglib) 

getBean has three args: beanname, args, classtype. always use beanname or beanname plus classtype  !!!
before getBean it will have condition judgement

Autowire use DependencyDescriptor(do not check the metaAnnotaion), ConfigClass use AnnotationMetadata(AnnotationMetadataReadingVisitor: metaAnnotationMap and attributesMap include metaAnnotaion)

qualifiedElement ???

xml config can use placeholder anywhere: PropertySourcesPlaceholderConfigurer(dont use PropertyPlaceholderConfigurer, @PropertySources will not work with it. context:property-placeholder will use PropertySourcesPlaceholderConfigurer if system-properties-mode is ENVIRONMENT(by default). if no xml definitions, no PlaceholderConfigurers are needed, BeanFactory will register a string resolver to deal with @Value, @PropertySources will also work)
PropertySourcesPlaceholderConfigurer is priorityOrderedBeanFactoryPostProcessor !!!
ConfigurationClassPostProcessor is priorityOrderedBeanDefinitionRegistryPostProcessor !!! go fisrt

BeanMethodInterceptor ConstructorResolver ???

DependencyDescriptor extends InjectionPoint:
getAnnotations()(this.field.getAnnotations() or this.methodParameter.getParameterAnnotations()) 
MethodParameter:
getMethodAnnotations()(getAnnotatedElement().getAnnotations() getAnnotatedElement-> method/constructor)

program format:
shortcut
fallback
	
spring startup:

org.springframework.web.context.ContextLoaderListener extends org.springframework.web.context.ContextLoader implements ServletContextListener{
	public void contextInitialized ( ServletContextEvent sce ){
		ContextLoader.initWebApplicationContext(ServletContext servletContext){
			this.context = createWebApplicationContext(servletContext){
				determineContextClass(servletContext){
					String contextClassName = servletContext.getInitParameter("contextClass");
					determine the application context, the default will be XmlWebApplicationContext
				}
			}
			if this.context instanceof ConfigurableWebApplicationContext {
				setParent:loadParentContext(servletContext){
					servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)
					if LOCATOR_FACTORY_KEY_PARAM is not set by web.xml, no parent!
				}
				configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc){
					wac.setId: getInitParameter(CONTEXT_ID_PARAM)
					wac.setServletContext: sc
					wac.setConfigLocation:getInitParameter(CONFIG_LOCATION_PARAM)
					customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext){
						determineContextInitializerClasses(servletContext){ (used for extension)
							getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)
							ApplicationContextInitializer class name is spilt by ","
						}
						ApplicationContextInitializer<C extends ConfigurableApplicationContext> has: void initialize(C applicationContext) will be called
					}
					wac.refresh();
				}
			}
			servletContext.setAttribute(WebApplicationContext.class.getName() + ".ROOT", this.context);
			return this.context;
		}
	}
}

AbstractApplicationContext.refresh(){
	// Prepare this context for refreshing.
	prepareRefresh()

	// Tell the subclass to refresh the internal bean factory.
	ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(){
		AbstractRefreshableApplicationContext.refreshBeanFactory(){
			if hasBeanFactory() {
				destroyBeans()
				closeBeanFactory()
			}
			DefaultListableBeanFactory beanFactory = createBeanFactory()
			beanFactory.setSerializationId(getId())
			customizeBeanFactory(beanFactory) (used for extension)
			XmlWebApplicationContext.loadBeanDefinitions(beanFactory){
				XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);
				initialize beanDefinitionReader
				loadBeanDefinitions(beanDefinitionReader){
					load the resources from configLocation
					XmlBeanDefinitionReader,GroovyBeanDefinitionReader,PropertiesBeanDefinitionReader
					XmlBeanDefinitionReader.loadBeanDefinitions(resource){
						Document doc = doLoadDocument(inputSource, resource);
						return registerBeanDefinitions(doc,resource){
							DefaultBeanDefinitionDocumentReader and BeanDefinitionParserDelegate are two important classes for parsing bean definitions
							registerBeanDefinitions(DefaultBeanDefinitionDocumentReader){
								doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader){
									preProcessXml (used for extension)
									parseBeanDefinitions(DefaultBeanDefinitionDocumentReader){
										//the properties of ParserContext are important
										parseDefaultElement(DefaultBeanDefinitionDocumentReader);
										parseCustomElement(BeanDefinitionParserDelegate);
									}
									postProcessXml (used for extension)
								}
							}
						}
					}
				}
			}
			this.beanFactory = beanFactory;
		}
		ConfigurableListableBeanFactory beanFactory = getBeanFactory();
		return beanFactory
	}

	// Prepare the bean factory for use in this context.
	prepareBeanFactory(beanFactory){
		beanFactory.setBeanClassLoader(getClassLoader());
		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver());
		beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));

		// Configure the bean factory with context callbacks.
		beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));
		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);
		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);
		beanFactory.ignoreDependencyInterface(MessageSourceAware.class);
		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);
		beanFactory.ignoreDependencyInterface(EnvironmentAware.class);

		// BeanFactory interface not registered as resolvable type in a plain factory.
		// MessageSource registered (and found for autowiring) as a bean.
		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);
		beanFactory.registerResolvableDependency(ResourceLoader.class, this);
		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);
		beanFactory.registerResolvableDependency(ApplicationContext.class, this);
		//no MessageSource, because it is registered as a bean

		// Detect a LoadTimeWeaver and prepare for weaving, if found.
		if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
			beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
			// Set a temporary ClassLoader for type matching.
			beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
		}

		// Register default environment beans.
		if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {
			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());
		}
		if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {
			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());
		}
		if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {
			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());
		}
	}

	// Allows post-processing of the bean factory in context subclasses.
	postProcessBeanFactory(beanFactory)(AbstractRefreshableWebApplicationContext){
		addBeanPostProcessor(new ServletContextAwareProcessor(this.servletContext, this.servletConfig));
	}

	// create BeanFactoryPostProcessor via getBean
	// Invoke factory processors registered as beans in the context.
	invokeBeanFactoryPostProcessors(beanFactory)(AbstractApplicationContext){
		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());{
			if (beanFactory instanceof BeanDefinitionRegistry){
				convert beanFactory to registry 
				//the beanFactoryPostProcessors in AbstractApplicationContext is empty at the beginning
				//but if there are some BeanDefinitionRegistryPostProcessors in AbstractApplicationContext, 
				//it should not in BeanDefinitionRegistry and SingletonBeanRegistry otherwise it will be called twice!!!
				splite beanFactoryPostProcessors into registryPostProcessors and regularPostProcessors and call registryPostProcessor.postProcessBeanDefinitionRegistry(registry) first
				
				//do not introduce the BeanDefinitionRegistryPostProcessor in the same group, otherwise it will be processed as the next group
				String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);{
					比较复杂 ???
					if (!isConfigurationFrozen()  || type == null || !allowEagerInit) {
						return doGetBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit){
							// Check all bean definitions.
							
							// Check manually registered singletons.
						}
					}
					//check the cache and then call doGetBeanNamesForType and cache the result
				}
				for (String ppName : postProcessorNames) {
					if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
						priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
						processedBeans.add(ppName);
					}
				}
				OrderComparator.sort(priorityOrderedPostProcessors);
				registryPostProcessors.addAll(priorityOrderedPostProcessors);
				invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);
				
				beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
				if (!processedBeans.contains(ppName) && beanFactory.isTypeMatch(ppName, Ordered.class)) {
					orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
					processedBeans.add(ppName);
				}
				OrderComparator.sort(orderedPostProcessors);
				registryPostProcessors.addAll(orderedPostProcessors);
				invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);
				
				//the rest
				while (reiterate) {
					reiterate = false;
					postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
					for (String ppName : postProcessorNames) {
						if (!processedBeans.contains(ppName)) {
							BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);
							registryPostProcessors.add(pp);
							processedBeans.add(ppName);
							pp.postProcessBeanDefinitionRegistry(registry);
							reiterate = true;
						}
					}
				}
				
				// private invokeBeanFactoryPostProcessors of this delegate
				invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);
				invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);//regularPostProcessors may be empty
			}else{
				invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);
			}
			
			String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);
			skip the processedBeans and spilt postProcessorNames into three groups:
			OrderComparator.sort(priorityOrderedPostProcessors);
			invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);
			OrderComparator.sort(orderedPostProcessors);
			invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);
			invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);
		}
	}

	// create BeanPostProcessor via getBean
	// Register bean processors that intercept bean creation.
	registerBeanPostProcessors(beanFactory){
		PostProcessorRegistrationDelegate.registerBeanPostProcessors{
			postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);
			int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;
			beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));{	
				this.beanPostProcessors.remove(beanPostProcessor);
				this.beanPostProcessors.add(beanPostProcessor);
			}

			spilt them into three groups and if it is MergedBeanDefinitionPostProcessor then internalPostProcessors.add(pp);
			OrderComparator.sort(priorityOrderedPostProcessors);
			registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);
			OrderComparator.sort(orderedPostProcessors);
			registerBeanPostProcessors(beanFactory, orderedPostProcessors);
			registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);
			OrderComparator.sort(internalPostProcessors);
			registerBeanPostProcessors(beanFactory, internalPostProcessors);
			
			beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
		}
	}

	// Initialize message source for this context.
	initMessageSource();

	// Initialize event multicaster for this context.
	initApplicationEventMulticaster();

	// Initialize other special beans in specific context subclasses.
	onRefresh();(used for extension)

	// Check for listener beans and register them.
	registerListeners();

	// Instantiate all remaining (non-lazy-init) singletons.
	finishBeanFactoryInitialization(beanFactory){
		// Initialize conversion service for this context.
		if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&
				beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {
			beanFactory.setConversionService(
					beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));
		}
		
		// Register a default embedded value resolver if no bean post-processor(such as a PropertyPlaceholderConfigurer bean) registered any before
		if (!beanFactory.hasEmbeddedValueResolver()) {
			beanFactory.addEmbeddedValueResolver(new StringValueResolver() {
				@Override
				public String resolveStringValue(String strVal) {
					return getEnvironment().resolvePlaceholders(strVal);
				}
			});
		}

		// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.
		String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
		for (String weaverAwareName : weaverAwareNames) {
			getBean(weaverAwareName);
		}

		// Stop using the temporary ClassLoader for type matching.
		beanFactory.setTempClassLoader(null);

		// Allow for caching all bean definition metadata, not expecting further changes.
		beanFactory.freezeConfiguration();

		// Instantiate all remaining (non-lazy-init) singletons.
		beanFactory.preInstantiateSingletons(){
			for (String beanName : beanNames) {
				RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
				if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {
					if (isFactoryBean(beanName)) {
						final FactoryBean<?> factory = (FactoryBean<?>) getBean("&" + beanName);
						boolean isEagerInit = (factory instanceof SmartFactoryBean && ((SmartFactoryBean<?>) factory).isEagerInit());
						if (isEagerInit) { //EagerInit is special setup only within SmartFactoryBean, normal FactoryBean expects to initialize when being accessed
							getBean(beanName);
						}
					}else{
						getBean(beanName);
					}
				}
			}
			for (String beanName : beanNames) {
				Object singletonInstance = getSingleton(beanName);
				if (singletonInstance instanceof SmartInitializingSingleton) {
					final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
					smartSingleton.afterSingletonsInstantiated();
				}
			}
		}
	}

	// Last step: publish corresponding event.
	finishRefresh();

	no resourceLoader? because AbstractApplicationContext extends DefaultResourceLoader!
}

	DefaultBeanDefinitionDocumentReader.parseDefaultElement(){												
		importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader);//IMPORT_ELEMENT
		processAliasRegistration(DefaultBeanDefinitionDocumentReader);//ALIAS_ELEMENT
		processBeanDefinition(DefaultBeanDefinitionDocumentReader){//BEAN_ELEMENT
			BeanDefinitionHolder bdHolder = parseBeanDefinitionElement(BeanDefinitionParserDelegate){
				...
				id -> beanName; name -> alias; BeanDefinitionHolder holds beanName, alias and BeanDefinition
			}
			BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry()){
				Registry is actually DefaultListableBeanFactory!!!
				registerBeanDefinition(DefaultListableBeanFactory)
			}
		}
		doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader);//BEANS_ELEMENT
	}
	BeanDefinitionParserDelegate.parseCustomElement(){
		//here to deal with "context:component-scan" 
		NamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri){
			resolve function will put the related parsers into handlerMappings of DefaultNamespaceHandlerResolver
			//map namespaceUri to handlerClass from property file
			NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);//ContextNamespaceHandler
			namespaceHandler.init();//important
			handlerMappings.put(namespaceUri, namespaceHandler);
			return namespaceHandler;
		}
		handler.parse(NamespaceHandlerSupport){
			BeanDefinitionParser parser = findParserForElement{
				String localName = parserContext.getDelegate().getLocalName(element);
				BeanDefinitionParser parser = this.parsers.get(localName);
			}
			return parser.parse();
		}
	}
	
------------------BeanDefinitionParser list start----------------------------------
	ComponentScanBeanDefinitionParser.parse(Element element, ParserContext parserContext){
		String[] basePackages = splite from config string
		//create ClassPathBeanDefinitionScanner with default typeFilter (ClassPathScanningCandidateComponentProvider#registerDefaultFilters)
		ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element); 
		Set<BeanDefinitionHolder> beanDefinitions = scanner.doScan(basePackages);{
			Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>();
			for (String basePackage : basePackages) {
				Set<BeanDefinition> candidates = findCandidateComponents(basePackage)(ClassPathScanningCandidateComponentProvider){
					Set<BeanDefinition> candidates = new LinkedHashSet<BeanDefinition>();
					Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);
					for (Resource resource : resources) {
						if resource.isReadable{
						MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource){
							new SimpleMetadataReader(resource, this.resourceLoader.getClassLoader()){
								classReader = new ClassReader(is);
								//StandardAnnotationMetadata is java reflect implementation, while AnnotationMetadataReadingVisitor is spring implementation
								AnnotationMetadataReadingVisitor visitor = new AnnotationMetadataReadingVisitor(classLoader);
								classReader.accept(visitor, ClassReader.SKIP_DEBUG);
								this.annotationMetadata = visitor;
								this.classMetadata = visitor;
								this.resource = resource;
							}
						}
						if isCandidateComponent(metadataReader){
							ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);
							sbd.setResource(resource);
							sbd.setSource(resource);
							if (isCandidateComponent(sbd))//verify whether AnnotationMetadata of sbd is concrete(not interface/abstract) and independent(outer class or static inner class) !!!
								candidates.add(sbd);
						}
						}
					}
					return candidates;
				}
			
				for (BeanDefinition candidate : candidates) {
					//@Scope to make scoped-proxy with proxyMode or other scopes with value
					ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);
					candidate.setScope(scopeMetadata.getScopeName());
					//get the bean name
					String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);
					if (candidate instanceof AbstractBeanDefinition) {
						postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);{
							beanDefinition.applyDefaults(this.beanDefinitionDefaults); //BeanDefinitionParserDelegate.populateDefaults setup defaults
							beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName));
						}
					}
					if (candidate instanceof AnnotatedBeanDefinition) {
						AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);{
							setup property of BeanDefinition with @Primary, @Lazy, @DependsOn, @Role, @Description
						}
					}
					if (checkCandidate(beanName, candidate)){// if !this.registry.containsBeanDefinition(beanName) return true, else check definition conflict
						BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);
						definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);//createScopedProxy according to scopedProxyMode of scopeMetadata (ScopedProxyCreator.createScopedProxy)
						beanDefinitions.add(definitionHolder);
						registerBeanDefinition(definitionHolder, this.registry);
					}
				}
			}
			return beanDefinitions;
		}
		registerComponents(parserContext.getReaderContext(), beanDefinitions, element);(ComponentScanBeanDefinitionParser){
			compositeDef.addNestedComponent(new BeanComponentDefinition(beanDefHolder));//no effect
			if annotationConfig{
				AnnotationConfigUtils.registerAnnotationConfigProcessors// register Autowired/ConfigClass/Common ... beanPostProcessor
				compositeDef.addNestedComponent(new BeanComponentDefinition(processorDefinition));//no effect
			}
			readerContext.fireComponentRegistered(compositeDef);//do nothing!!!
		}
	}
	protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException {
		for (TypeFilter tf : this.excludeFilters) {
			if (tf.match(metadataReader, this.metadataReaderFactory)) return false;
		}
		for (TypeFilter tf : this.includeFilters) {
			if (tf.match(metadataReader, this.metadataReaderFactory)) return isConditionMatch(metadataReader);//isConditionMatch to use @Conditional, no @Conditional at all return true
		}
		return false;
	}
	public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)(AbstractTypeHierarchyTraversingFilter){
		//matchSelf of AnnotationTypeFilter will check annotationSet and metaAnnotationMap of AnnotationMetadataReadingVisitor
		if (matchSelf(metadataReader)) return true;
		ClassMetadata metadata = metadataReader.getClassMetadata();
		if (matchClassName(metadata.getClassName())) return true;
		if (this.considerInherited) {...}
		if (this.considerInterfaces) {...}
		return false;
	}
	AspectJAutoProxyBeanDefinitionParser.parse(){
	}
	ConfigBeanDefinitionParser.parse(){
		to create DefaultBeanFactoryPointcutAdvisor and AspectJPointcutAdvisor advisors
	}
	AnnotationDrivenBeanDefinitionParser.parse(){
		if ("aspectj".equals(mode)) {
			registerTransactionAspect(element, parserContext);
		}
		else {
			// BeanFactoryTransactionAttributeSourceAdvisor has TransactionAttributeSourcePointcut
			// TransactionAttributeSourcePointcut will match whether the target has @Transactional
			AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);{
				AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(parserContext, element);{
					BeanDefinition beanDefinition = AopConfigUtils.registerAutoProxyCreatorIfNecessary(
							parserContext.getRegistry(), parserContext.extractSource(sourceElement));{
								//actually did not register or escalate and return null;
								return registerOrEscalateApcAsRequired(InfrastructureAdvisorAutoProxyCreator.class, registry, source);
							}
					//if proxyTargetClass is true
					useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);
					//if beanDefinition is null, did not register it
					registerComponentIfNecessary(beanDefinition, parserContext);
				}
				//txAdvisorBeanName = "org.springframework.transaction.config.internalTransactionAdvisor"
				if (!parserContext.getRegistry().containsBeanDefinition(txAdvisorBeanName)) {
					// Create the TransactionAttributeSource definition.
					RootBeanDefinition sourceDef = new RootBeanDefinition(
						"org.springframework.transaction.annotation.AnnotationTransactionAttributeSource");
					setup sourceDef
					String sourceName = parserContext.getReaderContext().registerWithGeneratedName(sourceDef);
					
					// Create the TransactionInterceptor definition.
					RootBeanDefinition interceptorDef = new RootBeanDefinition(TransactionInterceptor.class);
					setup interceptorDef
					interceptorDef.getPropertyValues().add("transactionManagerBeanName","transactionManager");
					interceptorDef.getPropertyValues().add("transactionAttributeSource", new RuntimeBeanReference(sourceName));
					//interceptorName "packageName.TransactionInterceptor#0"
					String interceptorName = parserContext.getReaderContext().registerWithGeneratedName(interceptorDef);
					
					// Create the TransactionAttributeSourceAdvisor definition.
					RootBeanDefinition advisorDef = new RootBeanDefinition(BeanFactoryTransactionAttributeSourceAdvisor.class);
					setup advisorDef
					advisorDef.getPropertyValues().add("transactionAttributeSource", new RuntimeBeanReference(sourceName));
					//will then retrieve by getBean("adviceBeanName") of getAdvice
					advisorDef.getPropertyValues().add("adviceBeanName", interceptorName);
					if hasAttribute("order")
						advisorDef.getPropertyValues().add("order", element.getAttribute("order"));
					parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef);
					
					//put component into compDefinition
					parserContext.registerComponent
				}
			}
		}
	}
	//tx manager parser:
	AbstractBeanDefinitionParser.parse(){
		AbstractSingleBeanDefinitionParser.parseInternal(){
			...
			Class<?> beanClass = getBeanClass(element);//tx:advice return TransactionInterceptor.class
			if (beanClass != null) {
				builder.getRawBeanDefinition().setBeanClass(beanClass);
			}
			TxAdviceBeanDefinitionParser.doParse(){
				...
				parseAttributeSource(){
					...
					RootBeanDefinition attributeSourceDefinition = new RootBeanDefinition(NameMatchTransactionAttributeSource.class);
					attributeSourceDefinition.setSource(parserContext.extractSource(attrEle));
					attributeSourceDefinition.getPropertyValues().add("nameMap", transactionAttributeMap);
					return attributeSourceDefinition;
				}
				...
			}
			...
		}
		String id = resolveId(element, definition, parserContext);//tx:advice return transactionAdvice
	}
	//context:property-placeholder parser:
	PropertyPlaceholderBeanDefinitionParser.parse(){
	}
	AnnotationDrivenBeanDefinitionParser.parse(){
		//compDefinition's name is mvc:annotation-driven
		parserContext.pushContainingComponent(compDefinition);
		
		//getRegistry().registerBeanDefinition
		parserContext.getReaderContext().registerWithGeneratedName
		
		//put component into compDefinition
		parserContext.registerComponent
	}
------------------BeanDefinitionParser list end----------------------------------
	
// Destroy start here.............

    public void contextDestroyed ( ServletContextEvent sce );
		closeWebApplicationContext(from ContextLoader){
			((ConfigurableWebApplicationContext) this.context).close(){
				doClose(){
					// Publish shutdown event.
					publishEvent(new ContextClosedEvent(this));
					
					// Stop all Lifecycle beans, to avoid delays during individual destruction.
					getLifecycleProcessor().onClose();
					
					// Destroy all cached singletons in the context's BeanFactory.
					destroyBeans();

					// Close the state of this context itself.
					closeBeanFactory();

					// Let subclasses do some final clean-up if they wish...
					onClose();
				}
				Runtime.getRuntime().removeShutdownHook(this.shutdownHook);
			}
			...
		}