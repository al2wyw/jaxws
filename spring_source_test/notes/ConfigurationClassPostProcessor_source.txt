@Import(ImportSelector or ImportBeanDefinitionRegistrar or otherClass)
ImportAware.setImportMetadata(ImportRegistry.getImportingClassFor())
ConfigurationClassPostProcessor implements BeanDefinitionRegistryPostProcessor: has ConfigurationClassParser and ConfigurationClassBeanDefinitionReader
	candidateIndicators.add(Component.class.getName());
	candidateIndicators.add(ComponentScan.class.getName());
	candidateIndicators.add(Import.class.getName());
	candidateIndicators.add(ImportResource.class.getName());
		
	postProcessBeanDefinitionRegistry{
		int registryId = System.identityHashCode(registry);
		registryId 判重
		processConfigBeanDefinitions(registry);
	}
	
	postProcessBeanFactory{
		int factoryId = System.identityHashCode(beanFactory);
		factoryId 判重
		if (!this.registriesPostProcessed.contains(factoryId))
			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory);
		enhanceConfigurationClasses(beanFactory);
		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory));
	}
	
	processConfigBeanDefinitions{
		String[] candidateNames = registry.getBeanDefinitionNames();
		for (String beanName : candidateNames) {
			BeanDefinition beanDef = registry.getBeanDefinition(beanName);
			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) || //  a class annotated with @Configuration
					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) { // a class annotated with candidateIndicators or just having @Bean methods
				beanDef has Full/Lite attribute, do nothing !!!
			}else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {// set Full/Lite attribute to beanDef
				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));
			}
		}
		sort configCandidates
		
		Detect any custom bean name generation strategy // org.springframework.context.annotation.internalConfigurationBeanNameGenerator
		BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);
		this.componentScanBeanNameGenerator = generator;
		this.importBeanNameGenerator = generator;
		
		ConfigurationClassParser parser = new ConfigurationClassParser(...);
		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates);
		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size());
		do {
			// Read the model and create bean definitions based on its content
			parser.parse(candidates);
			parser.validate();
			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses());
			configClasses.removeAll(alreadyParsed);
			
			this.reader = ConfigurationClassBeanDefinitionReader(...);
			this.reader.loadBeanDefinitions(configClasses);
			alreadyParsed.addAll(configClasses);
			
			candidates.clear();
			retry to load candidates from registry as ConfigurationClassParser will introduce more ConfigurationClassCandidate
		}while (!candidates.isEmpty());

		// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes
		if (singletonRegistry != null) {
			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) { // ConfigurationClassPostProcessor.class.getName() + ".importRegistry"
				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());
			}
		}
	}
	ConfigurationClassParser.parse(Set<BeanDefinitionHolder> configCandidates){
		for (BeanDefinitionHolder holder : configCandidates) {
			BeanDefinition bd = holder.getBeanDefinition();
			parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());{
				processConfigurationClass(new ConfigurationClass(clazz, beanName));{
					if (this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) return;
					ConfigurationClass existingClass = this.configurationClasses.get(configClass);
					if (existingClass != null) {
						if (configClass.isImported()) {
							if (existingClass.isImported()) existingClass.mergeImportedBy(configClass);//this.importedBy.addAll(otherConfigClass.importedBy)
							// Otherwise ignore new imported config class; existing non-imported class overrides it.
							return;
						}else {
							// Explicit bean definition found, probably replacing an import. Let's remove the old one and go with the new one.
							this.configurationClasses.remove(configClass);
							for (Iterator<ConfigurationClass> it = this.knownSuperclasses.values().iterator(); it.hasNext();) {
								if (configClass.equals(it.next())) it.remove();
							}
						}
					}
					SourceClass sourceClass = asSourceClass(configClass);//wrap Class of configClass
					do {
						sourceClass = doProcessConfigurationClass(configClass, sourceClass);{
							processMemberClasses(configClass, sourceClass);

							// Process any @PropertySource annotations
							for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(
									sourceClass.getMetadata(), PropertySources.class,
									org.springframework.context.annotation.PropertySource.class)) {
								if (this.environment instanceof ConfigurableEnvironment) {
									processPropertySource(propertySource);
								}
							}

							// Process any @ComponentScan annotations
							Set<AnnotationAttributes> componentScans = AnnotationConfigUtils.attributesForRepeatable(
									sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);
							if (!componentScans.isEmpty() &&
									!this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {
								for (AnnotationAttributes componentScan : componentScans) {
									// The config class is annotated with @ComponentScan -> perform the scan immediately
									Set<BeanDefinitionHolder> scannedBeanDefinitions =
											this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());//ComponentScanAnnotationParser
									for (BeanDefinitionHolder holder : scannedBeanDefinitions) {
										if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(), this.metadataReaderFactory)) {
											parse(holder.getBeanDefinition().getBeanClassName(), holder.getBeanName());
										}
									}
								}
							}

							// Process any @Import annotations
							processImports(configClass, sourceClass, getImports(sourceClass), true);//getImports -> get value of @Import

							// Process any @ImportResource annotations
							if (sourceClass.getMetadata().isAnnotated(ImportResource.class.getName())) {
								AnnotationAttributes importResource = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);
								String[] resources = importResource.getStringArray("locations");
								Class<? extends BeanDefinitionReader> readerClass = importResource.getClass("reader");
								for (String resource : resources) {
									String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);
									configClass.addImportedResource(resolvedResource, readerClass);
								}
							}

							// Process individual @Bean methods
							Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(sourceClass);
							for (MethodMetadata methodMetadata : beanMethods) {
								configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));
							}

							// Process default methods on interfaces
							processInterfaces(configClass, sourceClass);

							// Process superclass, if any
							if (sourceClass.getMetadata().hasSuperClass()) {
								String superclass = sourceClass.getMetadata().getSuperClassName();
								if (!superclass.startsWith("java") && !this.knownSuperclasses.containsKey(superclass)) {
									this.knownSuperclasses.put(superclass, configClass);
									// Superclass found, return its annotation metadata and recurse
									return sourceClass.getSuperClass();
								}
							}

							// No superclass -> processing is complete
							return null;
						}
					}while (sourceClass != null);
					this.configurationClasses.put(configClass, configClass); //key and value the same ...
				}
			}
		}
		processDeferredImportSelectors();{
			List<DeferredImportSelectorHolder> deferredImports = this.deferredImportSelectors;
			this.deferredImportSelectors = null;
			Collections.sort(deferredImports, DEFERRED_IMPORT_COMPARATOR);
			for (DeferredImportSelectorHolder deferredImport : deferredImports) {
				ConfigurationClass configClass = deferredImport.getConfigurationClass();
				String[] imports = deferredImport.getImportSelector().selectImports(configClass.getMetadata());
				processImports(configClass, asSourceClass(configClass), asSourceClasses(imports), false);	
			}
		}
	}
	ConfigurationClassParser.processPropertySource(AnnotationAttributes propertySource){
		PropertySourceFactory factory = (factoryClass == PropertySourceFactory.class ?
				DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiateClass(factoryClass));//DefaultPropertySourceFactory
		get locations,encoding from propertySource
		for (String location : locations) {
			String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);
			Resource resource = this.resourceLoader.getResource(resolvedLocation);
			addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));{
				add PropertySource to Environment.getPropertySources()//注意addPropertySource的先后顺序，影响resolve结果
			}
		}
	}
	ComponentScanAnnotationParser.parse(AnnotationAttributes componentScan, final String declaringClass){
		setup ClassPathBeanDefinitionScanner scanner with @ComponentScan AnnotationAttributes
		Set<String> basePackages = new LinkedHashSet<String>();
		String[] basePackagesArray = componentScan.getStringArray("basePackages");
		for (String pkg : basePackagesArray) {
			String[] tokenized = StringUtils.tokenizeToStringArray(this.environment.resolvePlaceholders(pkg),
					ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);
			basePackages.addAll(Arrays.asList(tokenized));
		}
		for (Class<?> clazz : componentScan.getClassArray("basePackageClasses")) {
			basePackages.add(ClassUtils.getPackageName(clazz));
		}
		if (basePackages.isEmpty()) {
			basePackages.add(ClassUtils.getPackageName(declaringClass));
		}
		return scanner.doScan(StringUtils.toStringArray(basePackages));
	}
	ConfigurationClassParser.processMemberClasses(ConfigurationClass configClass, SourceClass sourceClass){
		for (SourceClass memberClass : sourceClass.getMemberClasses()) {
			// isConfigurationCandidate -> Full or Lite ConfigClass
			if (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &&
					!memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) {
				this.importStack.push(configClass);
				try {
					processConfigurationClass(memberClass.asConfigClass(configClass));
					//create ConfigurationClass with imported configClass, isImported is true
				}
				finally {
					this.importStack.pop();
				}
			}
		}
	}
	ConfigurationClassParser.processImports(ConfigurationClass configClass, SourceClass currentSourceClass,
			Collection<SourceClass> importCandidates, boolean checkForCircularImports){
		if checkForCircularImports check circular imports with importStack
		else{
			this.importStack.push(configClass);//ArrayDeque push
			try {
				for (SourceClass candidate : importCandidates) {
					if (candidate.isAssignable(ImportSelector.class)) {
						// Candidate class is an ImportSelector -> delegate to it to determine imports
						Class<?> candidateClass = candidate.loadClass();
						ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector.class);
						ParserStrategyUtils.invokeAwareMethods(selector, this.environment, this.resourceLoader, this.registry);//set environment/resourceLoader/registry
						if (this.deferredImportSelectors != null && selector instanceof DeferredImportSelector) {
							this.deferredImportSelectors.add(new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));
						}else {
							String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());
							Collection<SourceClass> importSourceClasses = asSourceClasses(importClassNames);
							processImports(configClass, currentSourceClass, importSourceClasses, false);
						}
					}else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) {
						// Candidate class is an ImportBeanDefinitionRegistrar -> delegate to it to register additional bean definitions
						Class<?> candidateClass = candidate.loadClass();
						ImportBeanDefinitionRegistrar registrar = BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);
						ParserStrategyUtils.invokeAwareMethods(registrar, this.environment, this.resourceLoader, this.registry);
						configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());
					}else {
						// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -> process it as an @Configuration class
						this.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());
						processConfigurationClass(candidate.asConfigClass(configClass));//create ConfigurationClass with importedConfigClass, isImported is true
					}
				}
			}finally {
				this.importStack.pop();//ArrayDeque pop
			}
		}
	}
	ImportStack extends ArrayDeque<ConfigurationClass> implements ImportRegistry{
		private final MultiValueMap<String, AnnotationMetadata> imports = new LinkedMultiValueMap<String, AnnotationMetadata>();
		public void registerImport(AnnotationMetadata importingClass, String importedClass) {
			this.imports.add(importedClass, importingClass);
		}
		public AnnotationMetadata getImportingClassFor(String importedClass) {
			List<AnnotationMetadata> list = this.imports.get(importedClass);
			return (!CollectionUtils.isEmpty(list) ? list.get(list.size() - 1) : null);
		}
		public void removeImportingClass(String importingClass) {
			for (List<AnnotationMetadata> list : this.imports.values()) {
				for (Iterator<AnnotationMetadata> iterator = list.iterator(); iterator.hasNext();) {
					if (iterator.next().getClassName().equals(importingClass)) {
						iterator.remove(); break;
					}
				}
			}
		}
	}
	private static class ImportAwareBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter {
		private final BeanFactory beanFactory;
		public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) {
			if (bean instanceof EnhancedConfiguration) {
				((EnhancedConfiguration) bean).setBeanFactory(this.beanFactory);
			}
			return pvs;
		}
		public Object postProcessBeforeInitialization(Object bean, String beanName)  {
			if (bean instanceof ImportAware) {
				ImportRegistry ir = this.beanFactory.getBean(IMPORT_REGISTRY_BEAN_NAME, ImportRegistry.class);
				AnnotationMetadata importingClass = ir.getImportingClassFor(bean.getClass().getSuperclass().getName());
				if (importingClass != null) ((ImportAware) bean).setImportMetadata(importingClass);
			}
			return bean;
		}
	}
	ConfigurationClassBeanDefinitionReader.loadBeanDefinitions((Set<ConfigurationClass> configurationModel)){
		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator();//conditionEvaluator.shouldSkip
		for (ConfigurationClass configClass : configurationModel) {
			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);{
				if (trackedConditionEvaluator.shouldSkip(configClass)) {
					String beanName = configClass.getBeanName();
					if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {
						this.registry.removeBeanDefinition(beanName);
					}
					this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName()); return;
				}
				if (configClass.isImported()) {
					registerBeanDefinitionForImportedConfigurationClass(configClass);{
						AnnotationMetadata metadata = configClass.getMetadata();
						AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);
						ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef);
						configBeanDef.setScope(scopeMetadata.getScopeName());
						String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry);
						AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata);
						BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName);
						definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);
						this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition());
						configClass.setBeanName(configBeanName);
					}
				}
				for (BeanMethod beanMethod : configClass.getBeanMethods()) {
					loadBeanDefinitionsForBeanMethod(beanMethod);{
						ConfigurationClass configClass = beanMethod.getConfigurationClass();
						MethodMetadata metadata = beanMethod.getMetadata();
						String methodName = metadata.getMethodName();

						if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {
							configClass.skippedBeanMethods.add(methodName); return;
						}
						if (configClass.skippedBeanMethods.contains(methodName)) return;
						for (String alias : names) { // @Bean(name="")
							this.registry.registerAlias(beanName, alias);
						}
						if (isOverriddenByExistingDefinition(beanMethod, beanName)) {//check bean clash, the same bean name
							return;
						}
						ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);
						beanDef.setResource(configClass.getResource());
						beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));
						if (metadata.isStatic()) {
							// static @Bean method
							beanDef.setBeanClassName(configClass.getMetadata().getClassName());
							beanDef.setFactoryMethodName(metadata.getMethodName());
						}else {
							// instance @Bean method
							beanDef.setFactoryBeanName(configClass.getBeanName());
							beanDef.setUniqueFactoryMethodName(metadata.getMethodName());
							//call setFactoryMethodName() and set isFactoryMethodUnique to true
						}
						beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);
						AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);
						Autowire autowire = bean.getEnum("autowire");
						if (autowire.isAutowire()) {
							beanDef.setAutowireMode(autowire.value());
						}
						String initMethodName = bean.getString("initMethod");
						if (StringUtils.hasText(initMethodName)) {
							beanDef.setInitMethodName(initMethodName);
						}
						String destroyMethodName = bean.getString("destroyMethod");
						if (destroyMethodName != null) {
							beanDef.setDestroyMethodName(destroyMethodName);
						}
						ScopedProxyMode proxyMode = ScopedProxyMode.NO;
						AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);
						if (attributes != null) {
							beanDef.setScope(attributes.getString("value"));
							proxyMode = attributes.getEnum("proxyMode");
							if (proxyMode == ScopedProxyMode.DEFAULT) proxyMode = ScopedProxyMode.NO;
						}
						// Replace the original bean definition with the target one, if necessary
						BeanDefinition beanDefToRegister = beanDef;
						if (proxyMode != ScopedProxyMode.NO) {
							BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(
									new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);
							beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);
						}
						this.registry.registerBeanDefinition(beanName, beanDefToRegister);
					}
				}
				loadBeanDefinitionsFromImportedResources(configClass.getImportedResources()); // XmlBeanDefinitionReader.loadBeanDefinitions
				loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());{
					for (Map.Entry<ImportBeanDefinitionRegistrar, AnnotationMetadata> entry : registrars.entrySet()) {
						entry.getKey().registerBeanDefinitions(entry.getValue(), this.registry);
					}
				}
			}
		}
	}
	ScopedProxyCreator.createScopedProxy(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry, boolean proxyTargetClass){
		return ScopedProxyUtils.createScopedProxy(definitionHolder, registry, proxyTargetClass){
		String originalBeanName = definition.getBeanName();
		BeanDefinition targetDefinition = definition.getBeanDefinition();
		String targetBeanName = getTargetBeanName(originalBeanName);//"scopedTarget." + originalBeanName
		// Create a scoped proxy definition for the original bean name, "hiding" the target bean in an internal target definition.
		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);
		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));
		proxyDefinition.setOriginatingBeanDefinition(targetDefinition);
		proxyDefinition.setSource(definition.getSource());
		proxyDefinition.setRole(targetDefinition.getRole());
		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName);
		if (proxyTargetClass) {
			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);
			// ScopedProxyFactoryBean's "proxyTargetClass" default is TRUE, so we don't need to set it explicitly here.
		}else {
			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE);
		}
		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate());
		proxyDefinition.setPrimary(targetDefinition.isPrimary());
		if (targetDefinition instanceof AbstractBeanDefinition) {
			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition);
		}
		// The target bean should be ignored in favor of the scoped proxy.
		targetDefinition.setAutowireCandidate(false);
		targetDefinition.setPrimary(false);
		registry.registerBeanDefinition(targetBeanName, targetDefinition);
		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases());
		}
	}
	ScopedProxyFactoryBean.setBeanFactory(BeanFactory beanFactory){
		//scopedTargetSource = new SimpleBeanTargetSource(); -> getTarget() -> getBeanFactory().getBean(getTargetBeanName());
		ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory;
		this.scopedTargetSource.setBeanFactory(beanFactory);
		ProxyFactory pf = new ProxyFactory();
		pf.copyFrom(this);
		pf.setTargetSource(this.scopedTargetSource);
		Class<?> beanType = beanFactory.getType(this.targetBeanName);
		if (!isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) {
			pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader()));
		}
		// Add an introduction that implements only the methods on ScopedObject.
		ScopedObject scopedObject = new DefaultScopedObject(cbf, this.scopedTargetSource.getTargetBeanName());
		pf.addAdvice(new DelegatingIntroductionInterceptor(scopedObject));
		// Add the AopInfrastructureBean marker to indicate that the scoped proxy itself is not subject to auto-proxying! Only its target bean is.
		pf.addInterface(AopInfrastructureBean.class);
		this.proxy = pf.getProxy(cbf.getBeanClassLoader());
	}
	ScopedProxyFactoryBean.getObject() {
		if (this.proxy == null) {
			throw new FactoryBeanNotInitializedException();
		}
		return this.proxy;
	}
	
	enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory){
		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>();
		for (String beanName : beanFactory.getBeanDefinitionNames()) {
			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName);
			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {
				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);
			}
		}
		//enhancedClass has no annotations on the overrided methods which are declared within itself !!!
		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer();
		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {
			AbstractBeanDefinition beanDef = entry.getValue();
			// If a @Configuration class gets proxied, always proxy the target class
			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);
			// Set enhanced subclass of the user-specified bean class
			Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader);
			Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader);
			if (configClass != enhancedClass) {
				beanDef.setBeanClass(enhancedClass);
			}
		}
	}
ConfigurationClassEnhancer{
	public interface EnhancedConfiguration extends BeanFactoryAware {//empty body
	}
	public Class<?> enhance(Class<?> configClass, ClassLoader classLoader){
		if (EnhancedConfiguration.class.isAssignableFrom(configClass)) {
			return configClass;
		}
		Class<?> enhancedClass = createClass(newEnhancer(configClass, classLoader){
			Enhancer enhancer = new Enhancer();
			enhancer.setSuperclass(configClass);
			enhancer.setInterfaces(new Class<?>[] {EnhancedConfiguration.class});
			enhancer.setUseFactory(false);
			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);
			enhancer.setStrategy(new BeanFactoryAwareGeneratorStrategy(classLoader));//generate public BeanFactory field
			enhancer.setCallbackFilter(CALLBACK_FILTER);
			enhancer.setCallbackTypes(CALLBACK_FILTER.getCallbackTypes());
			return enhancer;
		});{
			Class<?> subclass = enhancer.createClass();
			Enhancer.registerStaticCallbacks(subclass, CALLBACKS);
			return subclass;
		}
		return enhancedClass;		
	}
	private static final ConditionalCallbackFilter CALLBACK_FILTER = new ConditionalCallbackFilter(CALLBACKS);
	private static final Callback[] CALLBACKS = new Callback[] {
			new BeanMethodInterceptor(),
			new BeanFactoryAwareMethodInterceptor(),//setBeanFactory
			NoOp.INSTANCE
	};
	private static class BeanMethodInterceptor implements MethodInterceptor, ConditionalCallback {
		get the target bean name from ScopedProxy if @Scope exists
		deal with FactoryBean // objenesis is used
		if (isCurrentlyInvokedFactoryMethod(beanMethod)) {
			// The factory is calling the bean method in order to instantiate and register the bean
			// invoke the super implementation of the method to actually create the bean instance.
			return cglibMethodProxy.invokeSuper(enhancedConfigInstance, beanMethodArgs);
		}
		//else get bean from Factory rather than call the bean method in case of creating bean again (bean method call the other bean method)
		return obtainBeanInstanceFromFactory(beanMethod, beanMethodArgs, beanFactory, beanName);//beanFactory.getBean(beanName)
	}
}