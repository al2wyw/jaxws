<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:ws="http://jax-ws.dev.java.net/spring/core"
	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd
		 http://www.springframework.org/schema/aop 
		 http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://jax-ws.dev.java.net/spring/core
        http://jax-ws.dev.java.net/spring/core.xsd
        http://jax-ws.dev.java.net/spring/servlet
        http://jax-ws.dev.java.net/spring/servlet.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core.xsd
        ">

    <context:annotation-config />
    
	<wss:binding url="/test">
		<wss:service>
			<ws:service bean="#helloWS" >
				<ws:handlers>
                 <ref bean="validation"/>
             	</ws:handlers>
			</ws:service>
		</wss:service>
	</wss:binding>
	
	

	<bean id="helloWS" class="annotation.test" />
	<bean id="validation" class="handler.validationHandler"/>
	
	<wss:binding url="/people">
		<wss:service>
			<ws:service bean="#peopleWS" >
			</ws:service>
		</wss:service>
	</wss:binding>
	
	<bean id="peopleWS" class="webservice.ShowPeopleService" />
	
	<wss:binding url="/clientIP">
		<wss:service>
			<ws:service bean="#clientWS" >
			</ws:service>
		</wss:service>
	</wss:binding>
	
	<bean id="clientWS" class="webservice.webservicecontext" />
	
	<!-- <bean class="com.myws.serviceImpl.BeanPostProcess"/>-->
	<bean class="com.myws.serviceImpl.initializeBean"></bean>
	<bean id="showservice" class="com.myws.action.ShowServiceAction" init-method="init">
		<property name="action">
			<bean class="com.myws.serviceImpl.ShowURLService"/>
		</property>
	</bean>
	<!-- scope="prototype" -->
	<bean id="savePersonAction" class="com.myws.action.savePersonAction" scope="prototype">
		<property name="action" ref="savePersonService"/>
	</bean>
	<bean id="savePersonService" class="com.myws.serviceImpl.savePersonService">
		<property name="save" ref="savePersonXML"/>
		<property name="saveDB" ref="savePersonNotToDBCaller"/>
		<property name="flag" value="false"/>
	</bean>
	<bean id="savePersonModService" class="com.myws.serviceImpl.savePersonModService">
	</bean>
	<bean id="savePersonXML" class="com.myws.daoImpl.savePersonToXml"></bean>
	<bean id="savePersonDB" class="com.myws.daoImpl.savePersonToDB" autowire="byName">
	</bean>
	<bean id="savePersonNotToDBCaller" class="com.myws.daoImpl.savePersonNotToDBCaller">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
		<property name="action" ref="savePersonNotToDBCallee"/>
	</bean>
	<bean id="savePersonNotToDBCallee" class="com.myws.daoImpl.savePersonNotToDBCallee">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>
	
	<bean id="querymytabAction" class="com.myws.action.showMytabAction" scope="prototype">
		<property name="action" ref="queryMytabService"/>
	</bean>
	<bean id="queryMytabService" class="com.myws.serviceImpl.queryMytabServiceImpl">
		<property name="action" ref="queryMytabDao"/>
	</bean>
	<bean id="queryMytabDao" class="com.myws.daoImpl.queryMytabImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>
	
	<!-- aspect definition  -->
	<bean id="logbeforesave" class="com.myws.serviceImpl.logBeforeAdvisor"/>
	<bean id="logbeforeagainsave" class="com.myws.serviceImpl.logBeforeAgainAdvisor"/>
	<bean id="cachedAround" class="com.myws.serviceImpl.cachedAdvisorImpl">
		<property name="memcachedClient" ref="memcachedClient"/>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="test" expression="execution(* *..saveService.saveAction(*)) and args(person)"/>
		<aop:pointcut id="save" expression="execution(* *..savePersonNotToDBCaller.*(*)) or execution(* *..savePersonNotToDBCallee.*(*))"/>
		<aop:pointcut id="query" expression="execution(* *..queryMytabImpl.*(*))"/>
		<aop:pointcut id="queryService" expression="execution(* *..queryMytabService.queryByName(*)) and args(key)"/>
		<aop:advisor advice-ref="txm" pointcut-ref="save"/>
		<aop:advisor advice-ref="txm" pointcut-ref="query"/>
		<aop:aspect ref="logbeforesave">
			<!-- execution at the interface will intercept all the subclass -->
			<!-- the expression can not start with ..  -->
			<aop:before method="log" pointcut-ref="test" arg-names="person"/>
		</aop:aspect>
		<aop:aspect ref="logbeforeagainsave">
			<aop:before method="log" pointcut-ref="test" arg-names="person"/>
		</aop:aspect>
		<aop:aspect ref="cachedAround">
			<aop:around method="cachedHandler" pointcut-ref="queryService" arg-names="key"/>
		</aop:aspect>
	</aop:config>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<tx:advice id="txm" transaction-manager="transactionManager">
		<tx:attributes>  
	         <tx:method name="save" propagation="REQUIRED" rollback-for="RuntimeException"/>  
	         <tx:method name="query" propagation="REQUIRED" rollback-for="RuntimeException"/> 
	     </tx:attributes> 
	</tx:advice>

	
	<!-- JDBC Connection -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
  	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
  		<property name="dataSource" ref="dataSource"/>
  	</bean>
  	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">  
        <property name="poolProperties">  
            <bean class="org.apache.tomcat.jdbc.pool.PoolProperties">  
                <property name="url" value="${jdbc.url}"/>  
                <property name="driverClassName" value="${jdbc.class}"/>  
                <property name="username" value="${jdbc.username}"/>  
                <property name="password" value="${jdbc.password}"/>  
                <property name="jmxEnabled" value="true"/>  
                <property name="testWhileIdle" value="false"/>  
                <property name="testOnBorrow" value="true"/>  
                <property name="validationInterval" value="30000"/>  
                <property name="testOnReturn" value="false"/>  
                <property name="validationQuery" value="select 1"/>  
                <property name="timeBetweenEvictionRunsMillis" value="30000"/>  
                <property name="maxActive" value="100"/>  
                <property name="initialSize" value="10"/>  
                <property name="maxWait" value="10000"/>  
                <property name="removeAbandonedTimeout" value="60"/>  
                <property name="minEvictableIdleTimeMillis" value="30000"/>  
                <property name="minIdle" value="10"/>  
                <property name="logAbandoned" value="true"/>  
                <property name="removeAbandoned" value="true"/>  
                <property name="jdbcInterceptors" value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"/>  
            </bean>  
        </property> 
    </bean>
    
    
    <!-- xmemcached connection -->
    <!--  
	<bean name="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
        <constructor-arg>
            <list>
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg>
                        <value>${memcache.ip}</value>
                    </constructor-arg>
                    <constructor-arg>
                        <value>${memcache.port}</value>
                    </constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>
    <bean name="memcachedClient" factory-bean="memcachedClientBuilder"
        factory-method="build" destroy-method="shutdown" />
     -->
    <!-- spymemcached connection --> 
    <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean" >
	    <property name="servers" value="${memcache.ip}:${memcache.port}"/>
	    <property name="protocol" value="BINARY"/>
	    <property name="transcoder">
	      <bean class="net.spy.memcached.transcoders.SerializingTranscoder">
	        <property name="compressionThreshold" value="1024"/>
	      </bean>
	    </property>
	    <property name="opTimeout" value="1000"/>
	    <property name="timeoutExceptionThreshold" value="1998"/>
	    <property name="hashAlg">
            <value type="net.spy.memcached.DefaultHashAlgorithm">KETAMA_HASH</value>
		</property>
	    <property name="locatorType" value="CONSISTENT"/> 
	    <property name="failureMode" value="Redistribute"/>
	    <property name="useNagleAlgorithm" value="false"/>
   </bean>
   
  <!--  
   <amq:broker useJmx="false" persistent="false">
    		<amq:transportConnectors>
	      <amq:transportConnector uri="tcp://localhost:0" />
	    </amq:transportConnectors>
  </amq:broker>
 
  <amq:connectionFactory id="jmsFactory" brokerURL="vm://localhost"/>
  -->
  <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
    <property name="connectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL">
          <value>tcp://${jms.ip}:${jms.port}</value>
        </property>
      </bean>
    </property>
  </bean>
  <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    <property name="connectionFactory">
      <ref local="jmsFactory"/>
    </property>
  </bean>
  <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">  
    <constructor-arg value="topic"/>  
  </bean>
</beans>